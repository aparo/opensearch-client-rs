/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InferenceFeatureImportance {
    #[serde(rename = "classes", default, skip_serializing_if = "Option::is_none")]
    pub classes: Option<Vec<common::aggregations::InferenceClassImportance>>,
    #[serde(rename = "importance", default, skip_serializing_if = "Option::is_none")]
    pub importance: Option<f64>,
    #[serde(rename = "feature_name")]
    pub feature_name: String,
}

impl InferenceFeatureImportance {
    
    pub fn new(feature_name: String) -> InferenceFeatureImportance {
        InferenceFeatureImportance {
            classes: None,
            importance: None,
            feature_name,
        }
    }
}
