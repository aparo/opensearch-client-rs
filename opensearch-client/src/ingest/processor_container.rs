// /*
//  * opensearch-client
//  *
//  * Rust Client for OpenSearch
//  *
//  * The version of the OpenAPI document: 3.1.0
//  * Contact: alberto.paro@gmail.com
//  * Generated by Paro OpenAPI Generator
//  */
// use crate::common;
// use serde::{Deserialize, Serialize};

// #[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
// pub struct ProcessorContainer {
//     #[serde(rename = "user_agent", default, skip_serializing_if = "Option::is_none")]
//     pub user_agent: Option<String>,
//     #[serde(rename = "dot_expander", default, skip_serializing_if = "Option::is_none")]
//     pub dot_expander: Option<String>,
//     #[serde(rename = "attachment", default, skip_serializing_if = "Option::is_none")]
//     pub attachment: Option<String>,
//     #[serde(rename = "rename", default, skip_serializing_if = "Option::is_none")]
//     pub rename: Option<String>,
//     #[serde(rename = "urldecode", default, skip_serializing_if = "Option::is_none")]
//     pub urldecode: Option<String>,
//     #[serde(rename = "fail", default, skip_serializing_if = "Option::is_none")]
//     pub fail: Option<String>,
//     #[serde(rename = "set_security_user", default, skip_serializing_if = "Option::is_none")]
//     pub set_security_user: Option<String>,
//     #[serde(rename = "date", default, skip_serializing_if = "Option::is_none")]
//     pub date: Option<String>,
//     #[serde(rename = "text_embedding", default, skip_serializing_if = "Option::is_none")]
//     pub text_embedding: Option<String>,
//     #[serde(rename = "kv", default, skip_serializing_if = "Option::is_none")]
//     pub kv: Option<String>,
//     #[serde(rename = "append", default, skip_serializing_if = "Option::is_none")]
//     pub append: Option<String>,
//     #[serde(rename = "grok", default, skip_serializing_if = "Option::is_none")]
//     pub grok: Option<String>,
//     #[serde(rename = "drop", default, skip_serializing_if = "Option::is_none")]
//     pub drop: Option<String>,
//     #[serde(rename = "json", default, skip_serializing_if = "Option::is_none")]
//     pub json: Option<String>,
//     #[serde(rename = "gsub", default, skip_serializing_if = "Option::is_none")]
//     pub gsub: Option<String>,
//     #[serde(rename = "dissect", default, skip_serializing_if = "Option::is_none")]
//     pub dissect: Option<String>,
//     #[serde(rename = "geoip", default, skip_serializing_if = "Option::is_none")]
//     pub geoip: Option<String>,
//     #[serde(rename = "convert", default, skip_serializing_if = "Option::is_none")]
//     pub convert: Option<String>,
//     #[serde(rename = "lowercase", default, skip_serializing_if = "Option::is_none")]
//     pub lowercase: Option<String>,
//     #[serde(rename = "date_index_name", default, skip_serializing_if = "Option::is_none")]
//     pub date_index_name: Option<String>,
//     #[serde(rename = "circle", default, skip_serializing_if = "Option::is_none")]
//     pub circle: Option<String>,
//     #[serde(rename = "remove", default, skip_serializing_if = "Option::is_none")]
//     pub remove: Option<String>,
//     #[serde(rename = "script", default, skip_serializing_if = "Option::is_none")]
//     pub script: Option<common::Script>,
//     #[serde(rename = "csv", default, skip_serializing_if = "Option::is_none")]
//     pub csv: Option<String>,
//     #[serde(rename = "trim", default, skip_serializing_if = "Option::is_none")]
//     pub trim: Option<String>,
//     #[serde(rename = "split", default, skip_serializing_if = "Option::is_none")]
//     pub split: Option<String>,
//     #[serde(rename = "uppercase", default, skip_serializing_if = "Option::is_none")]
//     pub uppercase: Option<String>,
//     #[serde(rename = "join", default, skip_serializing_if = "Option::is_none")]
//     pub join: Option<String>,
//     #[serde(rename = "pipeline", default, skip_serializing_if = "Option::is_none")]
//     pub pipeline: Option<String>,
//     #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
//     pub sort: Option<String>,
//     #[serde(rename = "foreach", default, skip_serializing_if = "Option::is_none")]
//     pub foreach: Option<String>,
//     #[serde(rename = "set", default, skip_serializing_if = "Option::is_none")]
//     pub set: Option<String>,
//     #[serde(rename = "bytes", default, skip_serializing_if = "Option::is_none")]
//     pub bytes: Option<String>,
// }

// impl ProcessorContainer {

//     pub fn new() -> ProcessorContainer {
//         ProcessorContainer {
//             user_agent: None,
//             dot_expander: None,
//             attachment: None,
//             rename: None,
//             urldecode: None,
//             fail: None,
//             set_security_user: None,
//             date: None,
//             text_embedding: None,
//             kv: None,
//             append: None,
//             grok: None,
//             drop: None,
//             json: None,
//             gsub: None,
//             dissect: None,
//             geoip: None,
//             convert: None,
//             lowercase: None,
//             date_index_name: None,
//             circle: None,
//             remove: None,
//             script: None,
//             csv: None,
//             trim: None,
//             split: None,
//             uppercase: None,
//             join: None,
//             pipeline: None,
//             sort: None,
//             foreach: None,
//             set: None,
//             bytes: None,
//         }
//     }
// }
