/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchModelsResponse {  /// Whether the search timed out.
    #[serde(rename = "timed_out", default, skip_serializing_if = "Option::is_none")]
    pub timed_out: Option<bool>,
    #[serde(rename = "_shards", default, skip_serializing_if = "Option::is_none")]
    pub shards: Option<common::ShardStatistics>,
    #[serde(rename = "hits")]
    pub hits: ml::SearchHits,  /// The time taken to execute the search.
    #[serde(rename = "took", default, skip_serializing_if = "Option::is_none")]
    pub took: Option<u32>,
}

impl SearchModelsResponse {
    
    pub fn new(hits: ml::SearchHits) -> SearchModelsResponse {
        SearchModelsResponse {
            timed_out: None,
            shards: None,
            hits,
            took: None,
        }
    }
}
