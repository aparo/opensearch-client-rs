/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

/// PutTemplate
/// The template definition

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutTemplate {
    /// Configuration options for the index.
    #[serde(rename = "settings", default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<serde_json::Value>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
    #[serde(
        rename = "index_patterns",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub index_patterns: Option<common::StringOrStringArray>,
    #[serde(rename = "mappings", default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<common::mapping::TypeMapping>,
    /// Order in which OpenSearch applies this template if index
    /// matches multiple templates.
    ///
    /// Templates with lower 'order' values are merged first. Templates with higher
    /// 'order' values are merged later, overriding templates with lower values.
    #[serde(rename = "order", default, skip_serializing_if = "Option::is_none")]
    pub order: Option<u32>,
    /// Aliases for the index.
    #[serde(rename = "aliases", default, skip_serializing_if = "Option::is_none")]
    pub aliases: Option<serde_json::Value>,
}

impl PutTemplate {
    /// The template definition
    pub fn new() -> PutTemplate {
        PutTemplate {
            settings: None,
            version: None,
            index_patterns: None,
            mappings: None,
            order: None,
            aliases: None,
        }
    }
}
