/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AllocationStore {
    #[serde(rename = "in_sync")]
    pub in_sync: bool,
    #[serde(rename = "allocation_id")]
    pub allocation_id: String,
    #[serde(rename = "matching_size_in_bytes")]
    pub matching_size_in_bytes: u32,
    #[serde(rename = "store_exception")]
    pub store_exception: String,
    #[serde(rename = "found")]
    pub found: bool,
    #[serde(rename = "matching_sync_id")]
    pub matching_sync_id: bool,
}

impl AllocationStore {
    
    pub fn new(in_sync: bool, allocation_id: String, matching_size_in_bytes: u32, store_exception: String, found: bool, matching_sync_id: bool) -> AllocationStore {
        AllocationStore {
            in_sync,
            allocation_id,
            matching_size_in_bytes,
            store_exception,
            found,
            matching_sync_id,
        }
    }
}
