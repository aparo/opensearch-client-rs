/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::cluster;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterIndicesShards {  /// Total number of shards assigned to selected nodes.
    #[serde(rename = "total", default, skip_serializing_if = "Option::is_none")]
    pub total: Option<u32>,
    #[serde(rename = "index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<cluster::stats::ClusterIndicesShardsIndex>,  /// Number of primary shards assigned to selected nodes.
    #[serde(rename = "primaries", default, skip_serializing_if = "Option::is_none")]
    pub primaries: Option<u32>,  /// Ratio of replica shards to primary shards across all selected nodes.
    #[serde(rename = "replication", default, skip_serializing_if = "Option::is_none")]
    pub replication: Option<u32>,
}

impl ClusterIndicesShards {
    
    pub fn new() -> ClusterIndicesShards {
        ClusterIndicesShards {
            total: None,
            index: None,
            primaries: None,
            replication: None,
        }
    }
}
