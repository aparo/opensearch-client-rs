/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClientConfig {
    #[serde(rename = "retry_backoff_policy", default, skip_serializing_if = "Option::is_none")]
    pub retry_backoff_policy: Option<String>,
    #[serde(rename = "max_retry_times", default, skip_serializing_if = "Option::is_none")]
    pub max_retry_times: Option<u32>,
    #[serde(rename = "connection_timeout", default, skip_serializing_if = "Option::is_none")]
    pub connection_timeout: Option<u32>,
    #[serde(rename = "read_timeout", default, skip_serializing_if = "Option::is_none")]
    pub read_timeout: Option<u32>,
    #[serde(rename = "retry_backoff_millis", default, skip_serializing_if = "Option::is_none")]
    pub retry_backoff_millis: Option<u32>,
    #[serde(rename = "max_connection", default, skip_serializing_if = "Option::is_none")]
    pub max_connection: Option<u32>,
    #[serde(rename = "retry_timeout_seconds", default, skip_serializing_if = "Option::is_none")]
    pub retry_timeout_seconds: Option<u32>,
}

impl ClientConfig {
    
    pub fn new() -> ClientConfig {
        ClientConfig {
            retry_backoff_policy: None,
            max_retry_times: None,
            connection_timeout: None,
            read_timeout: None,
            retry_backoff_millis: None,
            max_connection: None,
            retry_timeout_seconds: None,
        }
    }
}
