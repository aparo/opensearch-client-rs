/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UploadModelRequestBodyJson {
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "model_group_id", default, skip_serializing_if = "Option::is_none")]
    pub model_group_id: Option<String>,  /// The model description.
    #[serde(rename = "description", default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "model_format", default, skip_serializing_if = "Option::is_none")]
    pub model_format: Option<String>,  /// The model name.
    #[serde(rename = "name")]
    pub name: String,
}

impl UploadModelRequestBodyJson {
    
    pub fn new(version: String, name: String) -> UploadModelRequestBodyJson {
        UploadModelRequestBodyJson {
            version,
            model_group_id: None,
            description: None,
            model_format: None,
            name,
        }
    }
}
