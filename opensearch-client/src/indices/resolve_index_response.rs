/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::indices;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveIndexResponse {
    #[serde(rename = "indices")]
    pub indices: Vec<indices::resolve_index::ResolveIndexItem>,
    #[serde(rename = "aliases")]
    pub aliases: Vec<indices::resolve_index::ResolveIndexAliasItem>,
    #[serde(rename = "data_streams")]
    pub data_streams: Vec<indices::resolve_index::ResolveIndexDataStreamsItem>,
}

impl ResolveIndexResponse {
    pub fn get_open_indices(&self) -> Vec<String> {
        self.indices
            .iter()
            .filter(|index| index.attributes.contains(&"open".to_string()))
            .map(|index| index.name.clone())
            .collect()
    }
}
