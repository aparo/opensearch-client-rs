/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgorithmOperations {
    #[serde(rename = "train_predict", default, skip_serializing_if = "Option::is_none")]
    pub train_predict: Option<ml::ModelStats>,
    #[serde(rename = "undeploy", default, skip_serializing_if = "Option::is_none")]
    pub undeploy: Option<ml::ModelStats>,
    #[serde(rename = "deploy", default, skip_serializing_if = "Option::is_none")]
    pub deploy: Option<ml::ModelStats>,
    #[serde(rename = "register", default, skip_serializing_if = "Option::is_none")]
    pub register: Option<ml::ModelStats>,
    #[serde(rename = "train", default, skip_serializing_if = "Option::is_none")]
    pub train: Option<ml::ModelStats>,
    #[serde(rename = "predict", default, skip_serializing_if = "Option::is_none")]
    pub predict: Option<ml::ModelStats>,
    #[serde(rename = "execute", default, skip_serializing_if = "Option::is_none")]
    pub execute: Option<ml::ModelStats>,
}

impl AlgorithmOperations {
    
    pub fn new() -> AlgorithmOperations {
        AlgorithmOperations {
            train_predict: None,
            undeploy: None,
            deploy: None,
            register: None,
            train: None,
            predict: None,
            execute: None,
        }
    }
}
