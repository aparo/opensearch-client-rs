/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Analyzer {
    
    StandardAnalyzerValue,
    
    SnowballAnalyzerValue,
    
    PatternAnalyzerValue,
    
    SimpleAnalyzerValue,
    
    IcuAnalyzerValue,
    
    SmartcnAnalyzerValue,
    
    NoriAnalyzerValue,
    
    WhitespaceAnalyzerValue,
    
    StopAnalyzerValue,
    
    FingerprintAnalyzerValue,
    
    DutchAnalyzerValue,
    
    CjkAnalyzerValue,
    
    PhoneAnalyzerValue,
    
    LanguageAnalyzerValue,
    
    KeywordAnalyzerValue,
    
    KuromojiAnalyzerValue,
    
    CustomAnalyzerValue,
}

impl std::fmt::Display for Analyzer {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::StandardAnalyzerValue => write!(f, "0"),
            Self::SnowballAnalyzerValue => write!(f, "0"),
            Self::PatternAnalyzerValue => write!(f, "0"),
            Self::SimpleAnalyzerValue => write!(f, "0"),
            Self::IcuAnalyzerValue => write!(f, "0"),
            Self::SmartcnAnalyzerValue => write!(f, "0"),
            Self::NoriAnalyzerValue => write!(f, "0"),
            Self::WhitespaceAnalyzerValue => write!(f, "0"),
            Self::StopAnalyzerValue => write!(f, "0"),
            Self::FingerprintAnalyzerValue => write!(f, "0"),
            Self::DutchAnalyzerValue => write!(f, "0"),
            Self::CjkAnalyzerValue => write!(f, "0"),
            Self::PhoneAnalyzerValue => write!(f, "0"),
            Self::LanguageAnalyzerValue => write!(f, "0"),
            Self::KeywordAnalyzerValue => write!(f, "0"),
            Self::KuromojiAnalyzerValue => write!(f, "0"),
            Self::CustomAnalyzerValue => write!(f, "0"),
        }
    }
}

impl Default for Analyzer {
    fn default() -> Analyzer {
        Self::StandardAnalyzerValue
    }
}
