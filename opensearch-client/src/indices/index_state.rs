/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::indices;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, Serialize, Deserialize)]
pub struct IndexState {
    /// The index settings to be updated.
    #[serde(rename = "settings", default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<indices::IndexSettings>,
    #[serde(rename = "aliases", default, skip_serializing_if = "Option::is_none")]
    pub aliases: Option<serde_json::Value>,
    #[serde(
        rename = "data_stream",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub data_stream: Option<String>,
    #[serde(rename = "mappings", default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<common::mapping::TypeMapping>,
    /// The index settings to be updated.
    #[serde(rename = "defaults", default, skip_serializing_if = "Option::is_none")]
    pub defaults: Option<indices::IndexSettings>,
}

impl IndexState {
    pub fn new() -> IndexState {
        IndexState {
            settings: None,
            aliases: None,
            data_stream: None,
            mappings: None,
            defaults: None,
        }
    }
}
