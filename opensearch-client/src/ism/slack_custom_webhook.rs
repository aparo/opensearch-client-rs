/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SlackCustomWebhook {
    #[serde(rename = "port", default, skip_serializing_if = "Option::is_none")]
    pub port: Option<u32>,
    #[serde(rename = "url", default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "username", default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    #[serde(rename = "password", default, skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    #[serde(rename = "header_params", default, skip_serializing_if = "Option::is_none")]
    pub header_params: Option<serde_json::Value>,
    #[serde(rename = "path", default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    #[serde(rename = "host", default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    #[serde(rename = "scheme", default, skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,
    #[serde(rename = "query_params", default, skip_serializing_if = "Option::is_none")]
    pub query_params: Option<serde_json::Value>,
}

impl SlackCustomWebhook {
    
    pub fn new() -> SlackCustomWebhook {
        SlackCustomWebhook {
            port: None,
            url: None,
            username: None,
            password: None,
            header_params: None,
            path: None,
            host: None,
            scheme: None,
            query_params: None,
        }
    }
}
