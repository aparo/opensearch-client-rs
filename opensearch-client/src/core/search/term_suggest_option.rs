/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TermSuggestOption {
    #[serde(rename = "highlighted", default, skip_serializing_if = "Option::is_none")]
    pub highlighted: Option<String>,
    #[serde(rename = "score")]
    pub score: f64,
    #[serde(rename = "collate_match", default, skip_serializing_if = "Option::is_none")]
    pub collate_match: Option<bool>,
    #[serde(rename = "freq", default, skip_serializing_if = "Option::is_none")]
    pub freq: Option<u32>,
    #[serde(rename = "text")]
    pub text: String,
}

impl TermSuggestOption {
    
    pub fn new(score: f64, text: String) -> TermSuggestOption {
        TermSuggestOption {
            highlighted: None,
            score,
            collate_match: None,
            freq: None,
            text,
        }
    }
}
