/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveIndexItem {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "data_stream", default, skip_serializing_if = "Option::is_none")]
    pub data_stream: Option<String>,
    #[serde(rename = "aliases", default, skip_serializing_if = "Option::is_none")]
    pub aliases: Option<Vec<String>>,
    #[serde(rename = "attributes")]
    pub attributes: Vec<String>,
}

impl ResolveIndexItem {
    
    pub fn new(name: String, attributes: Vec<String>) -> ResolveIndexItem {
        ResolveIndexItem {
            name,
            data_stream: None,
            aliases: None,
            attributes,
        }
    }
}
