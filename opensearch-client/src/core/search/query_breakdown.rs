/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryBreakdown {
    #[serde(rename = "create_weight")]
    pub create_weight: u32,
    #[serde(rename = "compute_max_score_count")]
    pub compute_max_score_count: u32,
    #[serde(rename = "next_doc_count")]
    pub next_doc_count: u32,
    #[serde(rename = "set_min_competitive_score")]
    pub set_min_competitive_score: u32,
    #[serde(rename = "score_count")]
    pub score_count: u32,
    #[serde(rename = "match_count")]
    pub match_count: u32,
    #[serde(rename = "compute_max_score")]
    pub compute_max_score: u32,
    #[serde(rename = "create_weight_count")]
    pub create_weight_count: u32,
    #[serde(rename = "match")]
    pub r#match: u32,
    #[serde(rename = "advance_count")]
    pub advance_count: u32,
    #[serde(rename = "set_min_competitive_score_count")]
    pub set_min_competitive_score_count: u32,
    #[serde(rename = "score")]
    pub score: u32,
    #[serde(rename = "build_scorer_count")]
    pub build_scorer_count: u32,
    #[serde(rename = "advance")]
    pub advance: u32,
    #[serde(rename = "shallow_advance")]
    pub shallow_advance: u32,
    #[serde(rename = "shallow_advance_count")]
    pub shallow_advance_count: u32,
    #[serde(rename = "build_scorer")]
    pub build_scorer: u32,
    #[serde(rename = "next_doc")]
    pub next_doc: u32,
}

impl QueryBreakdown {
    pub fn new(
        create_weight: u32,
        compute_max_score_count: u32,
        next_doc_count: u32,
        set_min_competitive_score: u32,
        score_count: u32,
        match_count: u32,
        compute_max_score: u32,
        create_weight_count: u32,
        r#match: u32,
        advance_count: u32,
        set_min_competitive_score_count: u32,
        score: u32,
        build_scorer_count: u32,
        advance: u32,
        shallow_advance: u32,
        shallow_advance_count: u32,
        build_scorer: u32,
        next_doc: u32,
    ) -> QueryBreakdown {
        QueryBreakdown {
            create_weight,
            compute_max_score_count,
            next_doc_count,
            set_min_competitive_score,
            score_count,
            match_count,
            compute_max_score,
            create_weight_count,
            r#match,
            advance_count,
            set_min_competitive_score_count,
            score,
            build_scorer_count,
            advance,
            shallow_advance,
            shallow_advance_count,
            build_scorer,
            next_doc,
        }
    }
}
