/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Source {
    #[serde(rename = "actions", default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<Vec<ml::Action>>,  /// The current worker node count.
    #[serde(rename = "current_worker_node_count", default, skip_serializing_if = "Option::is_none")]
    pub current_worker_node_count: Option<f64>,  /// The chunk number.
    #[serde(rename = "chunk_number", default, skip_serializing_if = "Option::is_none")]
    pub chunk_number: Option<u32>,  /// The model content hash value.
    #[serde(rename = "model_content_hash_value", default, skip_serializing_if = "Option::is_none")]
    pub model_content_hash_value: Option<String>,  /// The model version.
    #[serde(rename = "model_version", default, skip_serializing_if = "Option::is_none")]
    pub model_version: Option<String>,  /// The model task type.
    #[serde(rename = "model_task_type", default, skip_serializing_if = "Option::is_none")]
    pub model_task_type: Option<String>,  /// The status.
    #[serde(rename = "state", default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "worker_node", default, skip_serializing_if = "Option::is_none")]
    pub worker_node: Option<Vec<common::NodeIds>>,  /// The function name.
    #[serde(rename = "function_name", default, skip_serializing_if = "Option::is_none")]
    pub function_name: Option<String>,  /// The latest version.
    #[serde(rename = "latest_version", default, skip_serializing_if = "Option::is_none")]
    pub latest_version: Option<u32>,  /// The total chunks.
    #[serde(rename = "total_chunks", default, skip_serializing_if = "Option::is_none")]
    pub total_chunks: Option<u32>,
    #[serde(rename = "model_config", default, skip_serializing_if = "Option::is_none")]
    pub model_config: Option<ml::ModelConfig>,  /// The model content size in bytes.
    #[serde(rename = "model_content_size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub model_content_size_in_bytes: Option<u32>,  /// The updated time.
    #[serde(rename = "updated_time", default, skip_serializing_if = "Option::is_none")]
    pub updated_time: Option<String>,  /// The agent type
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,  /// The algorithm.
    #[serde(rename = "algorithm", default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,  /// The input type.
    #[serde(rename = "input_type", default, skip_serializing_if = "Option::is_none")]
    pub input_type: Option<String>,  /// Whether the model is hidden.
    #[serde(rename = "is_hidden", default, skip_serializing_if = "Option::is_none")]
    pub is_hidden: Option<bool>,
    #[serde(rename = "memory_id", default, skip_serializing_if = "Option::is_none")]
    pub memory_id: Option<String>,  /// The last deployed time.
    #[serde(rename = "last_deployed_time", default, skip_serializing_if = "Option::is_none")]
    pub last_deployed_time: Option<u32>,  /// The connector ID.
    #[serde(rename = "connector_id", default, skip_serializing_if = "Option::is_none")]
    pub connector_id: Option<String>,  /// The planning worker node count.
    #[serde(rename = "planning_worker_node_count", default, skip_serializing_if = "Option::is_none")]
    pub planning_worker_node_count: Option<f64>,  /// The connector protocol.
    #[serde(rename = "protocol", default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,  /// The username of the user.
    #[serde(rename = "user", default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    #[serde(rename = "model_format", default, skip_serializing_if = "Option::is_none")]
    pub model_format: Option<String>,  /// Task type.
    #[serde(rename = "task_type", default, skip_serializing_if = "Option::is_none")]
    pub task_type: Option<String>,  /// The model group access.
    #[serde(rename = "access", default, skip_serializing_if = "Option::is_none")]
    pub access: Option<String>,  /// The created time.
    #[serde(rename = "created_time", default, skip_serializing_if = "Option::is_none")]
    pub created_time: Option<u32>,  /// The model group ID.
    #[serde(rename = "model_group_id", default, skip_serializing_if = "Option::is_none")]
    pub model_group_id: Option<String>,
    #[serde(rename = "parameters", default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<ml::Parameters>,  /// The last registered time.
    #[serde(rename = "last_registered_time", default, skip_serializing_if = "Option::is_none")]
    pub last_registered_time: Option<u32>,  /// The auto redeploy retry times.
    #[serde(rename = "auto_redeploy_retry_times", default, skip_serializing_if = "Option::is_none")]
    pub auto_redeploy_retry_times: Option<u32>,  /// Whether to deploy to all nodes.
    #[serde(rename = "deploy_to_all_nodes", default, skip_serializing_if = "Option::is_none")]
    pub deploy_to_all_nodes: Option<bool>,
    #[serde(rename = "name", default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "owner", default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<ml::Owner>,  /// Additional information query.
    #[serde(rename = "additional_info", default, skip_serializing_if = "Option::is_none")]
    pub additional_info: Option<ml::AdditionalInfo>,
    #[serde(rename = "tools", default, skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<ml::ToolItems>>,  /// The model URL.
    #[serde(rename = "url", default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,  /// The backend roles.
    #[serde(rename = "backend_roles", default, skip_serializing_if = "Option::is_none")]
    pub backend_roles: Option<Vec<String>>,  /// The last update time.
    #[serde(rename = "last_update_time", default, skip_serializing_if = "Option::is_none")]
    pub last_update_time: Option<u32>,  /// The app type.
    #[serde(rename = "app_type", default, skip_serializing_if = "Option::is_none")]
    pub app_type: Option<String>,
    #[serde(rename = "planning_worker_nodes", default, skip_serializing_if = "Option::is_none")]
    pub planning_worker_nodes: Option<Vec<common::NodeIds>>,  /// The model state.
    #[serde(rename = "model_state", default, skip_serializing_if = "Option::is_none")]
    pub model_state: Option<String>,  /// The error message.
    #[serde(rename = "error", default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,  /// Whether the task is asynchronous.
    #[serde(rename = "is_async", default, skip_serializing_if = "Option::is_none")]
    pub is_async: Option<bool>,  /// The model description.
    #[serde(rename = "description", default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,  /// The last updated time.
    #[serde(rename = "last_updated_time", default, skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<u32>,
    #[serde(rename = "memory", default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<ml::Memory>,
    #[serde(rename = "model_id", default, skip_serializing_if = "Option::is_none")]
    pub model_id: Option<String>,
}

impl Source {
    
    pub fn new() -> Source {
        Source {
            actions: None,
            current_worker_node_count: None,
            chunk_number: None,
            model_content_hash_value: None,
            model_version: None,
            model_task_type: None,
            state: None,
            worker_node: None,
            function_name: None,
            latest_version: None,
            total_chunks: None,
            model_config: None,
            model_content_size_in_bytes: None,
            updated_time: None,
            r#type: None,
            version: None,
            algorithm: None,
            input_type: None,
            is_hidden: None,
            memory_id: None,
            last_deployed_time: None,
            connector_id: None,
            planning_worker_node_count: None,
            protocol: None,
            user: None,
            model_format: None,
            task_type: None,
            access: None,
            created_time: None,
            model_group_id: None,
            parameters: None,
            last_registered_time: None,
            auto_redeploy_retry_times: None,
            deploy_to_all_nodes: None,
            name: None,
            owner: None,
            additional_info: None,
            tools: None,
            url: None,
            backend_roles: None,
            last_update_time: None,
            app_type: None,
            planning_worker_nodes: None,
            model_state: None,
            error: None,
            is_async: None,
            description: None,
            last_updated_time: None,
            memory: None,
            model_id: None,
        }
    }
}
