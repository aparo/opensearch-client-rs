/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardCacheStats {
    #[serde(rename = "size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub size_in_bytes: Option<u32>,
    #[serde(rename = "hit_count", default, skip_serializing_if = "Option::is_none")]
    pub hit_count: Option<u32>,
    #[serde(rename = "miss_count", default, skip_serializing_if = "Option::is_none")]
    pub miss_count: Option<u32>,
    #[serde(rename = "evictions", default, skip_serializing_if = "Option::is_none")]
    pub evictions: Option<u32>,
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "store_name", default, skip_serializing_if = "Option::is_none")]
    pub store_name: Option<String>,
    #[serde(rename = "item_count", default, skip_serializing_if = "Option::is_none")]
    pub item_count: Option<u32>,
}

impl ShardCacheStats {
    
    pub fn new() -> ShardCacheStats {
        ShardCacheStats {
            size_in_bytes: None,
            hit_count: None,
            miss_count: None,
            evictions: None,
            size: None,
            store_name: None,
            item_count: None,
        }
    }
}
