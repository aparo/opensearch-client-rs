/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FielddataStats {
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(rename = "memory_size_in_bytes")]
    pub memory_size_in_bytes: u32,
    #[serde(rename = "evictions", default, skip_serializing_if = "Option::is_none")]
    pub evictions: Option<u32>,
    #[serde(rename = "memory_size", default, skip_serializing_if = "Option::is_none")]
    pub memory_size: Option<String>,
}

impl FielddataStats {
    
    pub fn new(memory_size_in_bytes: u32) -> FielddataStats {
        FielddataStats {
            fields: None,
            memory_size_in_bytes,
            evictions: None,
            memory_size: None,
        }
    }
}
