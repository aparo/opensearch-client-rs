/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchHitsHit {  /// The primary term.
    #[serde(rename = "_primary_term", default, skip_serializing_if = "Option::is_none")]
    pub primary_term: Option<u32>,
    #[serde(rename = "model_id", default, skip_serializing_if = "Option::is_none")]
    pub model_id: Option<String>,
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ml::Source>,  /// The sort values.
    #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<f64>>,
    #[serde(rename = "_index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(rename = "_id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "_seq_no", default, skip_serializing_if = "Option::is_none")]
    pub seq_no: Option<u32>,
    #[serde(rename = "_version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
}

impl SearchHitsHit {
    
    pub fn new() -> SearchHitsHit {
        SearchHitsHit {
            primary_term: None,
            model_id: None,
            source: None,
            sort: None,
            index: None,
            id: None,
            seq_no: None,
            version: None,
        }
    }
}
