/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateConnectorRequestBodyJson {
    #[serde(rename = "version")]
    pub version: u32,
    #[serde(rename = "parameters")]
    pub parameters: ml::Parameters,
    #[serde(rename = "protocol")]
    pub protocol: String,
    #[serde(rename = "credential")]
    pub credential: ml::Credential,
    #[serde(rename = "client_config", default, skip_serializing_if = "Option::is_none")]
    pub client_config: Option<ml::ClientConfig>,
    #[serde(rename = "actions")]
    pub actions: Vec<ml::Action>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description")]
    pub description: String,
}

impl CreateConnectorRequestBodyJson {
    
    pub fn new(version: u32, parameters: ml::Parameters, protocol: String, credential: ml::Credential, actions: Vec<ml::Action>, name: String, description: String) -> CreateConnectorRequestBodyJson {
        CreateConnectorRequestBodyJson {
            version,
            parameters,
            protocol,
            credential,
            client_config: None,
            actions,
            name,
            description,
        }
    }
}
