/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSource {
    #[serde(rename = "tags", default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "reference_id", default, skip_serializing_if = "Option::is_none")]
    pub reference_id: Option<String>,
    #[serde(rename = "title", default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "severity", default, skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
}

impl EventSource {
    
    pub fn new() -> EventSource {
        EventSource {
            tags: None,
            reference_id: None,
            title: None,
            severity: None,
        }
    }
}
