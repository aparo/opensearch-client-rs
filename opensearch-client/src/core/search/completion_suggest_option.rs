/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompletionSuggestOption {
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<serde_json::Value>,
    #[serde(rename = "score", default, skip_serializing_if = "Option::is_none")]
    pub score: Option<f64>,
    #[serde(rename = "_index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(rename = "contexts", default, skip_serializing_if = "Option::is_none")]
    pub contexts: Option<serde_json::Value>,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "_routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    #[serde(rename = "_id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "collate_match", default, skip_serializing_if = "Option::is_none")]
    pub collate_match: Option<bool>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
}

impl CompletionSuggestOption {
    
    pub fn new(text: String) -> CompletionSuggestOption {
        CompletionSuggestOption {
            source: None,
            score: None,
            index: None,
            contexts: None,
            text,
            routing: None,
            id: None,
            collate_match: None,
            fields: None,
        }
    }
}
