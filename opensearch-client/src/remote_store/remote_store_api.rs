/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;

use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as OtherError};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;
use crate::*;


#[async_trait]
pub trait RemoteStoreApi: Send + Sync {


    /// POST /_remotestore/_restore///
    /// Restores from remote store.
    async fn restore(&self, params: RestoreParams) -> Result<crate::remote_store::RestoreResponse, Error>;
}

pub struct RemoteStoreApiClient {
    configuration: Arc<crate::Configuration>
}

impl RemoteStoreApiClient {
    pub fn new(configuration: Arc<crate::Configuration>) -> Self {
        Self { configuration }
    }
}


/// Struct for passing parameters to the method [`restore`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct RestoreParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub cluster_manager_timeout: Option<String>,
      /// Comma-separated list of index IDs
    pub restore: remote_store::Restore,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
      /// Should this request wait until the operation has completed before returning.
    pub wait_for_completion: Option<bool>,
}

#[async_trait]
impl RemoteStoreApi for RemoteStoreApiClient {
///
      /// Restores from remote store.
    async fn restore(&self, params: RestoreParams) -> Result<crate::remote_store::RestoreResponse, Error> {
        let RestoreParams {
            cluster_manager_timeout,
            restore,
            error_trace,
            filter_path,
            human,
            pretty,
            source,
            wait_for_completion,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_remotestore/_restore", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = wait_for_completion {
        local_var_req_builder = local_var_req_builder.query(&[("wait_for_completion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_manager_timeout {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }






    local_var_req_builder = local_var_req_builder.json(&restore);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
}






