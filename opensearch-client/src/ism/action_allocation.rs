/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ActionAllocation {
    #[serde(rename = "require", default, skip_serializing_if = "Option::is_none")]
    pub require: Option<serde_json::Value>,
    #[serde(rename = "wait_for", default, skip_serializing_if = "Option::is_none")]
    pub wait_for: Option<bool>,
    #[serde(rename = "include", default, skip_serializing_if = "Option::is_none")]
    pub include: Option<serde_json::Value>,
    #[serde(rename = "exclude", default, skip_serializing_if = "Option::is_none")]
    pub exclude: Option<serde_json::Value>,
}

impl ActionAllocation {
    
    pub fn new() -> ActionAllocation {
        ActionAllocation {
            require: None,
            wait_for: None,
            include: None,
            exclude: None,
        }
    }
}
