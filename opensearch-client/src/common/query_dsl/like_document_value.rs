/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LikeDocumentValue {
    #[serde(rename = "per_field_analyzer", default, skip_serializing_if = "Option::is_none")]
    pub per_field_analyzer: Option<serde_json::Value>,
    #[serde(rename = "_id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
    #[serde(rename = "version_type", default, skip_serializing_if = "Option::is_none")]
    pub version_type: Option<String>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<String>>,
    #[serde(rename = "_index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
}

impl LikeDocumentValue {
    
    pub fn new() -> LikeDocumentValue {
        LikeDocumentValue {
            per_field_analyzer: None,
            id: None,
            routing: None,
            version: None,
            version_type: None,
            fields: None,
            index: None,
        }
    }
}
