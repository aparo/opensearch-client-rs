/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

/// UpdateByQuery
/// The search definition using the Query DSL


#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateByQuery {
    #[serde(rename = "slice", default, skip_serializing_if = "Option::is_none")]
    pub slice: Option<common::SlicedScroll>,  /// The maximum number of documents to update.
    #[serde(rename = "max_docs", default, skip_serializing_if = "Option::is_none")]
    pub max_docs: Option<u32>,
    #[serde(rename = "conflicts", default, skip_serializing_if = "Option::is_none")]
    pub conflicts: Option<String>,
    #[serde(rename = "query", default, skip_serializing_if = "Option::is_none")]
    pub query: Option<crate::dsl::Query>,
    #[serde(rename = "script", default, skip_serializing_if = "Option::is_none")]
    pub script: Option<common::Script>,
}

impl UpdateByQuery {
      /// The search definition using the Query DSL
    pub fn new() -> UpdateByQuery {
        UpdateByQuery {
            slice: None,
            max_docs: None,
            conflicts: None,
            query: None,
            script: None,
        }
    }
}
