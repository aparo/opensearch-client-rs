/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModelGroup {  /// The model group description.
    #[serde(rename = "description")]
    pub description: String,  /// The model group name.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "created_time", default, skip_serializing_if = "Option::is_none")]
    pub created_time: Option<u32>,  /// The latest version.
    #[serde(rename = "latest_version")]
    pub latest_version: u32,
    #[serde(rename = "last_updated_time", default, skip_serializing_if = "Option::is_none")]
    pub last_updated_time: Option<u32>,  /// The model group access.
    #[serde(rename = "access")]
    pub access: String,
    #[serde(rename = "owner", default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<ml::Owner>,
}

impl ModelGroup {
    
    pub fn new(description: String, name: String, latest_version: u32, access: String) -> ModelGroup {
        ModelGroup {
            description,
            name,
            created_time: None,
            latest_version,
            last_updated_time: None,
            access,
            owner: None,
        }
    }
}
