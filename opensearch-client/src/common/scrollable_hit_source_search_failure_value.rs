/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScrollableHitSourceSearchFailureValue {
    #[serde(rename = "node", default, skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    #[serde(rename = "reason")]
    pub reason: common::ErrorCause,
    #[serde(rename = "index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(rename = "status")]
    pub status: u32,
    #[serde(rename = "shard", default, skip_serializing_if = "Option::is_none")]
    pub shard: Option<u32>,
}

impl ScrollableHitSourceSearchFailureValue {
    
    pub fn new(reason: common::ErrorCause, status: u32) -> ScrollableHitSourceSearchFailureValue {
        ScrollableHitSourceSearchFailureValue {
            node: None,
            reason,
            index: None,
            status,
            shard: None,
        }
    }
}
