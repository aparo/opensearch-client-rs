/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Destination {  /// The name of the pipeline to use.
    #[serde(rename = "pipeline", default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<String>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    #[serde(rename = "version_type", default, skip_serializing_if = "Option::is_none")]
    pub version_type: Option<String>,
    #[serde(rename = "index")]
    pub index: String,
    #[serde(rename = "op_type", default, skip_serializing_if = "Option::is_none")]
    pub op_type: Option<String>,
}

impl Destination {
    
    pub fn new(index: String) -> Destination {
        Destination {
            pipeline: None,
            routing: None,
            version_type: None,
            index,
            op_type: None,
        }
    }
}
