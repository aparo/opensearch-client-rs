/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;

use crate::*;
use reqwest;
use serde::{de::Error as OtherError, Deserialize, Serialize};
use std::{collections::HashMap, sync::Arc};
pub struct IngestApiClient {
    configuration: Arc<crate::Configuration>,
}

#[bon]
impl IngestApiClient {
    pub fn new(configuration: Arc<crate::Configuration>) -> Self {
        Self { configuration }
    }

    ///
    /// Creates or updates a pipeline.
    #[builder(on(String, into))]
    pub async fn put_pipeline(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        id: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The ingest definition
        body: ingest::PutPipeline,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/pipeline/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates a pipeline.
    #[builder(on(String, into))]
    pub async fn put_pipeline_raw(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        id: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The ingest definition
        body: serde_json::Value,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/pipeline/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns all the pipeline.
    #[builder]
    pub async fn get_pipelines(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<HashMap<String, serde_json::Value>, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_ingest/pipeline", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }

    ///
    /// Returns a pipeline.
    #[builder]
    pub async fn get_pipeline(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        id: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::ingest::GetPipelineResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/pipeline/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes a pipeline.
    #[builder]
    pub async fn delete_pipeline(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        id: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/pipeline/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Allows to simulate a pipeline with example documents.
    #[builder]
    pub async fn simulate(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        id: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        verbose: Option<bool>,
        /// The simulate definition
        simulate: ingest::Simulate,
    ) -> Result<crate::ingest::SimulateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/pipeline/{id}/_simulate",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = verbose {
            local_var_req_builder =
                local_var_req_builder.query(&[("verbose", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&simulate);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns a list of the built-in patterns.
    #[builder]
    pub async fn processor_grok(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        s: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::ingest::ProcessorGrokResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_ingest/processor/grok",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = s {
            local_var_req_builder =
                local_var_req_builder.query(&[("s", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
}
