/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthRecord {  /// total number of shards
    #[serde(rename = "shards", default, skip_serializing_if = "Option::is_none")]
    pub shards: Option<String>,  /// cluster manager is discovered or not
    #[serde(rename = "discovered_cluster_manager", default, skip_serializing_if = "Option::is_none")]
    pub discovered_cluster_manager: Option<String>,  /// number of unassigned shards
    #[serde(rename = "unassign", default, skip_serializing_if = "Option::is_none")]
    pub unassign: Option<String>,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "epoch", default, skip_serializing_if = "Option::is_none")]
    pub epoch: Option<common::StringifiedEpochTimeUnitSeconds>,  /// cluster name
    #[serde(rename = "cluster", default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,  /// number of relocating nodes
    #[serde(rename = "relo", default, skip_serializing_if = "Option::is_none")]
    pub relo: Option<String>,  /// number of initializing nodes
    #[serde(rename = "init", default, skip_serializing_if = "Option::is_none")]
    pub init: Option<String>,  /// Time of day, expressed as HH:MM:SS.
    #[serde(rename = "timestamp", default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "active_shards_percent", default, skip_serializing_if = "Option::is_none")]
    pub active_shards_percent: Option<String>,  /// wait time of longest task pending
    #[serde(rename = "max_task_wait_time", default, skip_serializing_if = "Option::is_none")]
    pub max_task_wait_time: Option<String>,  /// number of pending tasks
    #[serde(rename = "pending_tasks", default, skip_serializing_if = "Option::is_none")]
    pub pending_tasks: Option<String>,  /// number of nodes that can store data
    #[serde(rename = "node.data", default, skip_serializing_if = "Option::is_none")]
    pub node_data: Option<String>,  /// total number of nodes
    #[serde(rename = "node.total", default, skip_serializing_if = "Option::is_none")]
    pub node_total: Option<String>,  /// number of primary shards
    #[serde(rename = "pri", default, skip_serializing_if = "Option::is_none")]
    pub pri: Option<String>,  /// health status
    #[serde(rename = "status", default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl HealthRecord {
    
    pub fn new() -> HealthRecord {
        HealthRecord {
            shards: None,
            discovered_cluster_manager: None,
            unassign: None,
            epoch: None,
            cluster: None,
            relo: None,
            init: None,
            timestamp: None,
            active_shards_percent: None,
            max_task_wait_time: None,
            pending_tasks: None,
            node_data: None,
            node_total: None,
            pri: None,
            status: None,
        }
    }
}
