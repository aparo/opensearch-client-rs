/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TopRightBottomLeftGeoBounds {  /// A latitude/longitude as a two-dimensional point. It can be represented in the following ways:
  /// - As a `{lat, long}` object.
  /// - As a geohash value.
  /// - As a `[lon, lat]` array.
  /// - As a string in `"<lat>, <lon>"` or WKT point format.
    #[serde(rename = "top_right")]
    pub top_right: common::GeoLocation,  /// A latitude/longitude as a two-dimensional point. It can be represented in the following ways:
  /// - As a `{lat, long}` object.
  /// - As a geohash value.
  /// - As a `[lon, lat]` array.
  /// - As a string in `"<lat>, <lon>"` or WKT point format.
    #[serde(rename = "bottom_left")]
    pub bottom_left: common::GeoLocation,
}

impl TopRightBottomLeftGeoBounds {
    
    pub fn new(top_right: common::GeoLocation, bottom_left: common::GeoLocation) -> TopRightBottomLeftGeoBounds {
        TopRightBottomLeftGeoBounds {
            top_right,
            bottom_left,
        }
    }
}
