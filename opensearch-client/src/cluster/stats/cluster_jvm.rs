/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::cluster;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterJvm {  /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(rename = "max_uptime", default, skip_serializing_if = "Option::is_none")]
    pub max_uptime: Option<String>,
    #[serde(rename = "max_uptime_in_millis")]
    pub max_uptime_in_millis: String,  /// Contains statistics about the JVM versions used by selected nodes.
    #[serde(rename = "versions")]
    pub versions: Vec<cluster::stats::ClusterJvmVersion>,
    #[serde(rename = "mem")]
    pub mem: cluster::stats::ClusterJvmMemory,  /// Number of active threads in use by JVM across all selected nodes.
    #[serde(rename = "threads")]
    pub threads: u32,
}

impl ClusterJvm {
    
    pub fn new(max_uptime_in_millis: String, versions: Vec<cluster::stats::ClusterJvmVersion>, mem: cluster::stats::ClusterJvmMemory, threads: u32) -> ClusterJvm {
        ClusterJvm {
            max_uptime: None,
            max_uptime_in_millis,
            versions,
            mem,
            threads,
        }
    }
}
