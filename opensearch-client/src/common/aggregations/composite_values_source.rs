/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompositeValuesSource {
    #[serde(rename = "value_type", default, skip_serializing_if = "Option::is_none")]
    pub value_type: Option<String>,
    #[serde(rename = "missing_order", default, skip_serializing_if = "Option::is_none")]
    pub missing_order: Option<String>,
    #[serde(rename = "missing_bucket", default, skip_serializing_if = "Option::is_none")]
    pub missing_bucket: Option<bool>,  /// The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
    #[serde(rename = "field", default, skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    #[serde(rename = "script", default, skip_serializing_if = "Option::is_none")]
    pub script: Option<common::Script>,
    #[serde(rename = "order", default, skip_serializing_if = "Option::is_none")]
    pub order: Option<String>,
}

impl CompositeValuesSource {
    
    pub fn new() -> CompositeValuesSource {
        CompositeValuesSource {
            value_type: None,
            missing_order: None,
            missing_bucket: None,
            field: None,
            script: None,
            order: None,
        }
    }
}
