/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeInfoJvmMemory {
    #[serde(rename = "direct_max_in_bytes")]
    pub direct_max_in_bytes: u32,
    #[serde(rename = "heap_init_in_bytes")]
    pub heap_init_in_bytes: u32,
    #[serde(rename = "heap_max", default, skip_serializing_if = "Option::is_none")]
    pub heap_max: Option<String>,
    #[serde(rename = "non_heap_init", default, skip_serializing_if = "Option::is_none")]
    pub non_heap_init: Option<String>,
    #[serde(rename = "heap_init", default, skip_serializing_if = "Option::is_none")]
    pub heap_init: Option<String>,
    #[serde(rename = "non_heap_init_in_bytes")]
    pub non_heap_init_in_bytes: u32,
    #[serde(rename = "non_heap_max", default, skip_serializing_if = "Option::is_none")]
    pub non_heap_max: Option<String>,
    #[serde(rename = "non_heap_max_in_bytes")]
    pub non_heap_max_in_bytes: u32,
    #[serde(rename = "heap_max_in_bytes")]
    pub heap_max_in_bytes: u32,
    #[serde(rename = "direct_max", default, skip_serializing_if = "Option::is_none")]
    pub direct_max: Option<String>,
}

impl NodeInfoJvmMemory {
    
    pub fn new(direct_max_in_bytes: u32, heap_init_in_bytes: u32, non_heap_init_in_bytes: u32, non_heap_max_in_bytes: u32, heap_max_in_bytes: u32) -> NodeInfoJvmMemory {
        NodeInfoJvmMemory {
            direct_max_in_bytes,
            heap_init_in_bytes,
            heap_max: None,
            non_heap_init: None,
            heap_init: None,
            non_heap_init_in_bytes,
            non_heap_max: None,
            non_heap_max_in_bytes,
            heap_max_in_bytes,
            direct_max: None,
        }
    }
}
