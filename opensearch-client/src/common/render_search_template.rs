/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

/// RenderSearchTemplate
/// The search definition template and its parameters.


#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RenderSearchTemplate {
    #[serde(rename = "id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,  /// Key-value pairs used to replace Mustache variables in the template.
  /// The key is the variable name.
  /// The value is the variable value.
    #[serde(rename = "params", default, skip_serializing_if = "Option::is_none")]
    pub params: Option<serde_json::Value>,  /// An inline search template.
  /// Supports the same parameters as the search API request body.
  /// These parameters also support Mustache variables.
  /// If no `id` or `<templated-id>` is specified, this parameter is required.
    #[serde(rename = "source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

impl RenderSearchTemplate {
      /// The search definition template and its parameters.
    pub fn new() -> RenderSearchTemplate {
        RenderSearchTemplate {
            id: None,
            params: None,
            source: None,
        }
    }
}
