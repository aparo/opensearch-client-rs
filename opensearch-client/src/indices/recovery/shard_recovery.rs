/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::indices;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardRecovery {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "translog")]
    pub translog: indices::recovery::TranslogStatus,
    #[serde(rename = "target")]
    pub target: indices::recovery::RecoveryOrigin,
    #[serde(rename = "start", default, skip_serializing_if = "Option::is_none")]
    pub start: Option<indices::recovery::RecoveryStartStatus>,
    #[serde(rename = "source")]
    pub source: indices::recovery::RecoveryOrigin,
    #[serde(rename = "stage")]
    pub stage: String,
    #[serde(rename = "total_time_in_millis")]
    pub total_time_in_millis: String,  /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(rename = "total_time", default, skip_serializing_if = "Option::is_none")]
    pub total_time: Option<String>,
    #[serde(rename = "stop_time_in_millis", default, skip_serializing_if = "Option::is_none")]
    pub stop_time_in_millis: Option<String>,  /// A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
  /// number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
  /// representation.
    #[serde(rename = "stop_time", default, skip_serializing_if = "Option::is_none")]
    pub stop_time: Option<common::DateTime>,
    #[serde(rename = "id")]
    pub id: u32,
    #[serde(rename = "verify_index")]
    pub verify_index: indices::recovery::VerifyIndex,  /// A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
  /// number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
  /// representation.
    #[serde(rename = "start_time", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<common::DateTime>,
    #[serde(rename = "primary")]
    pub primary: bool,
    #[serde(rename = "index")]
    pub index: indices::recovery::RecoveryIndexStatus,
    #[serde(rename = "start_time_in_millis")]
    pub start_time_in_millis: String,
}

impl ShardRecovery {
    
    pub fn new(r#type: String, translog: indices::recovery::TranslogStatus, target: indices::recovery::RecoveryOrigin, source: indices::recovery::RecoveryOrigin, stage: String, total_time_in_millis: String, id: u32, verify_index: indices::recovery::VerifyIndex, primary: bool, index: indices::recovery::RecoveryIndexStatus, start_time_in_millis: String) -> ShardRecovery {
        ShardRecovery {
            r#type,
            translog,
            target,
            start: None,
            source,
            stage,
            total_time_in_millis,
            total_time: None,
            stop_time_in_millis: None,
            stop_time: None,
            id,
            verify_index,
            start_time: None,
            primary,
            index,
            start_time_in_millis,
        }
    }
}
