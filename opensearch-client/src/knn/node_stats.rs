/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::knn;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeStats {
    #[serde(rename = "training_requests", default, skip_serializing_if = "Option::is_none")]
    pub training_requests: Option<f64>,
    #[serde(rename = "min_score_query_requests", default, skip_serializing_if = "Option::is_none")]
    pub min_score_query_requests: Option<f64>,
    #[serde(rename = "total_load_time", default, skip_serializing_if = "Option::is_none")]
    pub total_load_time: Option<f64>,
    #[serde(rename = "faiss_initialized", default, skip_serializing_if = "Option::is_none")]
    pub faiss_initialized: Option<bool>,
    #[serde(rename = "graph_memory_usage_percentage", default, skip_serializing_if = "Option::is_none")]
    pub graph_memory_usage_percentage: Option<f64>,
    #[serde(rename = "max_distance_query_with_filter_requests", default, skip_serializing_if = "Option::is_none")]
    pub max_distance_query_with_filter_requests: Option<f64>,
    #[serde(rename = "script_query_requests", default, skip_serializing_if = "Option::is_none")]
    pub script_query_requests: Option<f64>,
    #[serde(rename = "graph_index_requests", default, skip_serializing_if = "Option::is_none")]
    pub graph_index_requests: Option<f64>,
    #[serde(rename = "graph_memory_usage", default, skip_serializing_if = "Option::is_none")]
    pub graph_memory_usage: Option<f64>,
    #[serde(rename = "graph_index_errors", default, skip_serializing_if = "Option::is_none")]
    pub graph_index_errors: Option<f64>,
    #[serde(rename = "training_errors", default, skip_serializing_if = "Option::is_none")]
    pub training_errors: Option<f64>,
    #[serde(rename = "cache_capacity_reached", default, skip_serializing_if = "Option::is_none")]
    pub cache_capacity_reached: Option<bool>,
    #[serde(rename = "graph_query_requests", default, skip_serializing_if = "Option::is_none")]
    pub graph_query_requests: Option<f64>,
    #[serde(rename = "knn_query_requests", default, skip_serializing_if = "Option::is_none")]
    pub knn_query_requests: Option<f64>,
    #[serde(rename = "max_distance_query_requests", default, skip_serializing_if = "Option::is_none")]
    pub max_distance_query_requests: Option<f64>,
    #[serde(rename = "min_score_query_with_filter_requests", default, skip_serializing_if = "Option::is_none")]
    pub min_score_query_with_filter_requests: Option<f64>,
    #[serde(rename = "load_success_count", default, skip_serializing_if = "Option::is_none")]
    pub load_success_count: Option<f64>,
    #[serde(rename = "graph_stats", default, skip_serializing_if = "Option::is_none")]
    pub graph_stats: Option<knn::GraphStats>,
    #[serde(rename = "indexing_from_model_degraded", default, skip_serializing_if = "Option::is_none")]
    pub indexing_from_model_degraded: Option<bool>,
    #[serde(rename = "lucene_initialized", default, skip_serializing_if = "Option::is_none")]
    pub lucene_initialized: Option<bool>,
    #[serde(rename = "miss_count", default, skip_serializing_if = "Option::is_none")]
    pub miss_count: Option<f64>,
    #[serde(rename = "script_compilation_errors", default, skip_serializing_if = "Option::is_none")]
    pub script_compilation_errors: Option<f64>,
    #[serde(rename = "script_query_errors", default, skip_serializing_if = "Option::is_none")]
    pub script_query_errors: Option<f64>,
    #[serde(rename = "graph_query_errors", default, skip_serializing_if = "Option::is_none")]
    pub graph_query_errors: Option<f64>,
    #[serde(rename = "eviction_count", default, skip_serializing_if = "Option::is_none")]
    pub eviction_count: Option<f64>,
    #[serde(rename = "nmslib_initialized", default, skip_serializing_if = "Option::is_none")]
    pub nmslib_initialized: Option<bool>,
    #[serde(rename = "knn_query_with_filter_requests", default, skip_serializing_if = "Option::is_none")]
    pub knn_query_with_filter_requests: Option<f64>,
    #[serde(rename = "training_memory_usage", default, skip_serializing_if = "Option::is_none")]
    pub training_memory_usage: Option<f64>,
    #[serde(rename = "training_memory_usage_percentage", default, skip_serializing_if = "Option::is_none")]
    pub training_memory_usage_percentage: Option<f64>,
    #[serde(rename = "hit_count", default, skip_serializing_if = "Option::is_none")]
    pub hit_count: Option<f64>,
    #[serde(rename = "script_compilations", default, skip_serializing_if = "Option::is_none")]
    pub script_compilations: Option<f64>,
    #[serde(rename = "load_exception_count", default, skip_serializing_if = "Option::is_none")]
    pub load_exception_count: Option<f64>,
    #[serde(rename = "indices_in_cache", default, skip_serializing_if = "Option::is_none")]
    pub indices_in_cache: Option<serde_json::Value>,
}

impl NodeStats {
    
    pub fn new() -> NodeStats {
        NodeStats {
            training_requests: None,
            min_score_query_requests: None,
            total_load_time: None,
            faiss_initialized: None,
            graph_memory_usage_percentage: None,
            max_distance_query_with_filter_requests: None,
            script_query_requests: None,
            graph_index_requests: None,
            graph_memory_usage: None,
            graph_index_errors: None,
            training_errors: None,
            cache_capacity_reached: None,
            graph_query_requests: None,
            knn_query_requests: None,
            max_distance_query_requests: None,
            min_score_query_with_filter_requests: None,
            load_success_count: None,
            graph_stats: None,
            indexing_from_model_degraded: None,
            lucene_initialized: None,
            miss_count: None,
            script_compilation_errors: None,
            script_query_errors: None,
            graph_query_errors: None,
            eviction_count: None,
            nmslib_initialized: None,
            knn_query_with_filter_requests: None,
            training_memory_usage: None,
            training_memory_usage_percentage: None,
            hit_count: None,
            script_compilations: None,
            load_exception_count: None,
            indices_in_cache: None,
        }
    }
}
