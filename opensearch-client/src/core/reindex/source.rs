/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Source {
    #[serde(rename = "slice", default, skip_serializing_if = "Option::is_none")]
    pub slice: Option<common::SlicedScroll>,
    #[serde(rename = "remote", default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<core::reindex::RemoteSource>,
    #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<common::Sort>,
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<common::Fields>,  /// A comma-separated list of data streams, indexes, and aliases used to limit the request.
  /// Supports wildcards (`*`).
  /// To target all data streams and indexes, omit this parameter or use `*` or `_all`.
    #[serde(rename = "index")]
    pub index: common::Indices,
    #[serde(rename = "query", default, skip_serializing_if = "Option::is_none")]
    pub query: Option<crate::dsl::Query>,  /// The number of documents to index per batch.
  /// Use the `size` setting when indexing from a remote cluster. This ensures that batches fit in the on-heap buffer. The buffer defaults to a maximum size of `100MB`.
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<u32>,
}

impl Source {
    
    pub fn new(index: common::Indices) -> Source {
        Source {
            slice: None,
            remote: None,
            sort: None,
            source: None,
            index,
            query: None,
            size: None,
        }
    }
}
