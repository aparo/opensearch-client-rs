/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;

use super::{configuration, Error};
use crate::apis::ContentType;
use crate::*;
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as OtherError, Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait AsynchronousSearchApi: Send + Sync {
    /// GET /_plugins/_asynchronous_search/stats///
    /// Monitors any asynchronous searches that are `running`, `completed`, or `persisted`.
    async fn stats(
        &self,
        params: StatsParams,
    ) -> Result<crate::asynchronous_search::StatsResponse, Error>;

    /// POST /_plugins/_asynchronous_search///
    /// Performs an asynchronous search.
    async fn search(
        &self,
        params: SearchParams,
    ) -> Result<crate::asynchronous_search::ResponseBody, Error>;

    /// DELETE /_plugins/_asynchronous_search/{id}///
    /// Deletes any responses from an asynchronous search.
    async fn delete(
        &self,
        params: DeleteParams,
    ) -> Result<crate::asynchronous_search::DeleteResponse, Error>;

    /// GET /_plugins/_asynchronous_search/{id}///
    /// Gets partial responses from an asynchronous search.
    async fn get(
        &self,
        params: GetParams,
    ) -> Result<crate::asynchronous_search::ResponseBody, Error>;
}

pub struct AsynchronousSearchApiClient {
    configuration: Arc<crate::Configuration>,
}

impl AsynchronousSearchApiClient {
    pub fn new(configuration: Arc<crate::Configuration>) -> Self {
        Self { configuration }
    }
}

/// Struct for passing parameters to the method [`stats`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct StatsParams {
    /// No description available
    pub error_trace: Option<bool>,
    /// No description available
    pub filter_path: Option<common::FilterPath>,
    /// No description available
    pub human: Option<bool>,
    /// No description available
    pub pretty: Option<bool>,
    /// No description available
    pub source: Option<String>,
}
/// Struct for passing parameters to the method [`search`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct SearchParams {
    /// No description available
    pub error_trace: Option<bool>,
    /// No description available
    pub filter_path: Option<common::FilterPath>,
    /// No description available
    pub human: Option<bool>,
    /// No description available
    pub index: Option<String>,
    /// No description available
    pub keep_alive: Option<String>,
    /// No description available
    pub keep_on_completion: Option<bool>,
    /// No description available
    pub pretty: Option<bool>,
    /// No description available
    pub source: Option<String>,
    /// No description available
    pub wait_for_completion_timeout: Option<String>,
    /// The search definition using the Query DSL.
    pub search: asynchronous_search::Search,
}
/// Struct for passing parameters to the method [`delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteParams {
    /// No description available
    pub error_trace: Option<bool>,
    /// No description available
    pub filter_path: Option<common::FilterPath>,
    /// No description available
    pub human: Option<bool>,
    /// No description available
    pub id: String,
    /// No description available
    pub pretty: Option<bool>,
    /// No description available
    pub source: Option<String>,
}
/// Struct for passing parameters to the method [`get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetParams {
    /// No description available
    pub error_trace: Option<bool>,
    /// No description available
    pub filter_path: Option<common::FilterPath>,
    /// No description available
    pub human: Option<bool>,
    /// No description available
    pub id: String,
    /// No description available
    pub pretty: Option<bool>,
    /// No description available
    pub source: Option<String>,
}

#[async_trait]
impl AsynchronousSearchApi for AsynchronousSearchApiClient {
    ///
    /// Monitors any asynchronous searches that are `running`, `completed`, or `persisted`.
    async fn stats(
        &self,
        params: StatsParams,
    ) -> Result<crate::asynchronous_search::StatsResponse, Error> {
        let StatsParams {
            error_trace,
            filter_path,
            human,
            pretty,
            source,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_plugins/_asynchronous_search/stats",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Performs an asynchronous search.
    async fn search(
        &self,
        params: SearchParams,
    ) -> Result<crate::asynchronous_search::ResponseBody, Error> {
        let SearchParams {
            error_trace,
            filter_path,
            human,
            index,
            keep_alive,
            keep_on_completion,
            pretty,
            source,
            wait_for_completion_timeout,
            search,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_plugins/_asynchronous_search",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = wait_for_completion_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_completion_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = index {
            local_var_req_builder =
                local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = keep_on_completion {
            local_var_req_builder =
                local_var_req_builder.query(&[("keep_on_completion", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = keep_alive {
            local_var_req_builder =
                local_var_req_builder.query(&[("keep_alive", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&search);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes any responses from an asynchronous search.
    async fn delete(
        &self,
        params: DeleteParams,
    ) -> Result<crate::asynchronous_search::DeleteResponse, Error> {
        let DeleteParams {
            error_trace,
            filter_path,
            human,
            id,
            pretty,
            source,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_plugins/_asynchronous_search/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Gets partial responses from an asynchronous search.
    async fn get(
        &self,
        params: GetParams,
    ) -> Result<crate::asynchronous_search::ResponseBody, Error> {
        let GetParams {
            error_trace,
            filter_path,
            human,
            id,
            pretty,
            source,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_plugins/_asynchronous_search/{id}",
            local_var_configuration.base_path,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
}








