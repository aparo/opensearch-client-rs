/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeInfoOscpu {
    #[serde(rename = "mhz")]
    pub mhz: u32,
    #[serde(rename = "total_sockets")]
    pub total_sockets: u32,
    #[serde(rename = "cache_size_in_bytes")]
    pub cache_size_in_bytes: u32,
    #[serde(rename = "cache_size")]
    pub cache_size: String,
    #[serde(rename = "model")]
    pub model: String,
    #[serde(rename = "total_cores")]
    pub total_cores: u32,
    #[serde(rename = "cores_per_socket")]
    pub cores_per_socket: u32,
    #[serde(rename = "vendor")]
    pub vendor: String,
}

impl NodeInfoOscpu {
    
    pub fn new(mhz: u32, total_sockets: u32, cache_size_in_bytes: u32, cache_size: String, model: String, total_cores: u32, cores_per_socket: u32, vendor: String) -> NodeInfoOscpu {
        NodeInfoOscpu {
            mhz,
            total_sockets,
            cache_size_in_bytes,
            cache_size,
            model,
            total_cores,
            cores_per_socket,
            vendor,
        }
    }
}
