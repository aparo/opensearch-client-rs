/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::observability;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateObject {
    #[serde(rename = "tenant", default, skip_serializing_if = "Option::is_none")]
    pub tenant: Option<String>,
    #[serde(rename = "lastUpdatedTimeMs", default, skip_serializing_if = "Option::is_none")]
    pub last_updated_time_ms: Option<u32>,
    #[serde(rename = "objectId")]
    pub object_id: String,
    #[serde(rename = "savedVisualization", default, skip_serializing_if = "Option::is_none")]
    pub saved_visualization: Option<observability::SavedVisualization>,
    #[serde(rename = "savedQuery", default, skip_serializing_if = "Option::is_none")]
    pub saved_query: Option<observability::SavedQuery>,
    #[serde(rename = "createdTimeMs", default, skip_serializing_if = "Option::is_none")]
    pub created_time_ms: Option<u32>,
    #[serde(rename = "operationalPanel", default, skip_serializing_if = "Option::is_none")]
    pub operational_panel: Option<observability::OperationalPanel>,
}

impl CreateObject {
    
    pub fn new(object_id: String) -> CreateObject {
        CreateObject {
            tenant: None,
            last_updated_time_ms: None,
            object_id,
            saved_visualization: None,
            saved_query: None,
            created_time_ms: None,
            operational_panel: None,
        }
    }
}
