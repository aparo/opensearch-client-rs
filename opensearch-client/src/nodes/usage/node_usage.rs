/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeUsage {
    #[serde(rename = "since")]
    pub since: String,
    #[serde(rename = "rest_actions", default, skip_serializing_if = "Option::is_none")]
    pub rest_actions: Option<serde_json::Value>,
    #[serde(rename = "aggregations", default, skip_serializing_if = "Option::is_none")]
    pub aggregations: Option<serde_json::Value>,
    #[serde(rename = "timestamp")]
    pub timestamp: String,
}

impl NodeUsage {
    
    pub fn new(since: String, timestamp: String) -> NodeUsage {
        NodeUsage {
            since,
            rest_actions: None,
            aggregations: None,
            timestamp,
        }
    }
}
