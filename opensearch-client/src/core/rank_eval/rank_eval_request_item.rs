/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RankEvalRequestItem {
    #[serde(rename = "request", default, skip_serializing_if = "Option::is_none")]
    pub request: Option<core::rank_eval::RankEvalQuery>,
    #[serde(rename = "id")]
    pub id: String,  /// A list of document ratings.
    #[serde(rename = "ratings")]
    pub ratings: Vec<core::rank_eval::DocumentRating>,  /// The search template parameters.
    #[serde(rename = "params", default, skip_serializing_if = "Option::is_none")]
    pub params: Option<serde_json::Value>,
    #[serde(rename = "template_id", default, skip_serializing_if = "Option::is_none")]
    pub template_id: Option<String>,
}

impl RankEvalRequestItem {
    
    pub fn new(id: String, ratings: Vec<core::rank_eval::DocumentRating>) -> RankEvalRequestItem {
        RankEvalRequestItem {
            request: None,
            id,
            ratings,
            params: None,
            template_id: None,
        }
    }
}
