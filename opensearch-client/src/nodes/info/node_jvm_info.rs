/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeJvmInfo {
    #[serde(rename = "input_arguments", default, skip_serializing_if = "Option::is_none")]
    pub input_arguments: Option<Vec<String>>,  /// A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
  /// number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
  /// representation.
    #[serde(rename = "start_time", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<common::DateTime>,
    #[serde(rename = "vm_name", default, skip_serializing_if = "Option::is_none")]
    pub vm_name: Option<String>,
    #[serde(rename = "memory_pools", default, skip_serializing_if = "Option::is_none")]
    pub memory_pools: Option<Vec<String>>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "vm_vendor", default, skip_serializing_if = "Option::is_none")]
    pub vm_vendor: Option<String>,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "using_compressed_ordinary_object_pointers", default, skip_serializing_if = "Option::is_none")]
    pub using_compressed_ordinary_object_pointers: Option<common::StringifiedBoolean>,
    #[serde(rename = "gc_collectors", default, skip_serializing_if = "Option::is_none")]
    pub gc_collectors: Option<Vec<String>>,
    #[serde(rename = "start_time_in_millis")]
    pub start_time_in_millis: String,
    #[serde(rename = "vm_version", default, skip_serializing_if = "Option::is_none")]
    pub vm_version: Option<String>,
    #[serde(rename = "pid")]
    pub pid: u32,
    #[serde(rename = "bundled_jdk")]
    pub bundled_jdk: bool,
    #[serde(rename = "mem")]
    pub mem: nodes::info::NodeInfoJvmMemory,
}

impl NodeJvmInfo {
    
    pub fn new(start_time_in_millis: String, pid: u32, bundled_jdk: bool, mem: nodes::info::NodeInfoJvmMemory) -> NodeJvmInfo {
        NodeJvmInfo {
            input_arguments: None,
            start_time: None,
            vm_name: None,
            memory_pools: None,
            version: None,
            vm_vendor: None,
            using_compressed_ordinary_object_pointers: None,
            gc_collectors: None,
            start_time_in_millis,
            vm_version: None,
            pid,
            bundled_jdk,
            mem,
        }
    }
}
