/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ClusterStatistics {
    #[serde(rename = "partial")]
    pub partial: u32,
    #[serde(rename = "details", default, skip_serializing_if = "Option::is_none")]
    pub details: Option<serde_json::Value>,
    #[serde(rename = "failed")]
    pub failed: u32,
    #[serde(rename = "running")]
    pub running: u32,
    #[serde(rename = "skipped")]
    pub skipped: u32,
    #[serde(rename = "total")]
    pub total: u32,
    #[serde(rename = "successful")]
    pub successful: u32,
}

impl ClusterStatistics {
    
    pub fn new(partial: u32, failed: u32, running: u32, skipped: u32, total: u32, successful: u32) -> ClusterStatistics {
        ClusterStatistics {
            partial,
            details: None,
            failed,
            running,
            skipped,
            total,
            successful,
        }
    }
}
