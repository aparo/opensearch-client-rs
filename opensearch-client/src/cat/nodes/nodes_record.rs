/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodesRecord {  /// The completed scroll contexts.
    #[serde(rename = "search.scroll_total", default, skip_serializing_if = "Option::is_none")]
    pub search_scroll_total: Option<String>,
    #[serde(rename = "heap.percent", default, skip_serializing_if = "Option::is_none")]
    pub heap_percent: Option<String>,  /// The time spent in deletions.
    #[serde(rename = "indexing.delete_time", default, skip_serializing_if = "Option::is_none")]
    pub indexing_delete_time: Option<String>,  /// The time spend in suggest.
    #[serde(rename = "suggest.time", default, skip_serializing_if = "Option::is_none")]
    pub suggest_time: Option<String>,  /// The used file descriptors.
    #[serde(rename = "file_desc.current", default, skip_serializing_if = "Option::is_none")]
    pub file_desc_current: Option<String>,  /// The OpenSearch distribution flavor.
    #[serde(rename = "flavor", default, skip_serializing_if = "Option::is_none")]
    pub flavor: Option<String>,  /// The time spent in successful gets.
    #[serde(rename = "get.exists_time", default, skip_serializing_if = "Option::is_none")]
    pub get_exists_time: Option<String>,
    #[serde(rename = "disk.used", default, skip_serializing_if = "Option::is_none")]
    pub disk_used: Option<String>,  /// The bound transport port.
    #[serde(rename = "port", default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,  /// The average size in bytes of shard bulk.
    #[serde(rename = "bulk.avg_size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub bulk_avg_size_in_bytes: Option<String>,  /// The time spent in query phase.
    #[serde(rename = "search.query_time", default, skip_serializing_if = "Option::is_none")]
    pub search_query_time: Option<String>,
    #[serde(rename = "search.concurrent_query_current", default, skip_serializing_if = "Option::is_none")]
    pub search_concurrent_query_current: Option<String>,  /// The number of current suggest operations.
    #[serde(rename = "suggest.current", default, skip_serializing_if = "Option::is_none")]
    pub suggest_current: Option<String>,  /// The number of pending refresh listeners.
    #[serde(rename = "refresh.listeners", default, skip_serializing_if = "Option::is_none")]
    pub refresh_listeners: Option<String>,  /// The total script compilations.
    #[serde(rename = "script.compilations", default, skip_serializing_if = "Option::is_none")]
    pub script_compilations: Option<String>,  /// The number of completed merge operations.
    #[serde(rename = "merges.total", default, skip_serializing_if = "Option::is_none")]
    pub merges_total: Option<String>,  /// The number of segments.
    #[serde(rename = "segments.count", default, skip_serializing_if = "Option::is_none")]
    pub segments_count: Option<String>,  /// The number of failed gets.
    #[serde(rename = "get.missing_total", default, skip_serializing_if = "Option::is_none")]
    pub get_missing_total: Option<String>,  /// The number of bulk shard operations.
    #[serde(rename = "bulk.total_operations", default, skip_serializing_if = "Option::is_none")]
    pub bulk_total_operations: Option<String>,  /// The time spent in failed gets.
    #[serde(rename = "get.missing_time", default, skip_serializing_if = "Option::is_none")]
    pub get_missing_time: Option<String>,  /// The maximum configured heap.
    #[serde(rename = "heap.max", default, skip_serializing_if = "Option::is_none")]
    pub heap_max: Option<String>,  /// The number of indexing operations.
    #[serde(rename = "indexing.index_total", default, skip_serializing_if = "Option::is_none")]
    pub indexing_index_total: Option<String>,  /// A comma-separated list of the roles of the node.
  /// Returned values may include but are not limited to: `data`, `ingest`, `master`, `cluster_manager`, `remote_cluster_client`, `search`, and `-`(coordinating node only).
    #[serde(rename = "node.roles", default, skip_serializing_if = "Option::is_none")]
    pub node_roles: Option<String>,
    #[serde(rename = "search.point_in_time_time", default, skip_serializing_if = "Option::is_none")]
    pub search_point_in_time_time: Option<String>,
    #[serde(rename = "file_desc.percent", default, skip_serializing_if = "Option::is_none")]
    pub file_desc_percent: Option<String>,  /// The memory used by the version map.
    #[serde(rename = "segments.version_map_memory", default, skip_serializing_if = "Option::is_none")]
    pub segments_version_map_memory: Option<String>,  /// The number of successful get operations.
    #[serde(rename = "get.exists_total", default, skip_serializing_if = "Option::is_none")]
    pub get_exists_total: Option<String>,  /// The time spent in get.
    #[serde(rename = "get.time", default, skip_serializing_if = "Option::is_none")]
    pub get_time: Option<String>,
    #[serde(rename = "disk.total", default, skip_serializing_if = "Option::is_none")]
    pub disk_total: Option<String>,  /// The maximum number of file descriptors.
    #[serde(rename = "file_desc.max", default, skip_serializing_if = "Option::is_none")]
    pub file_desc_max: Option<String>,  /// The time spent in flush.
    #[serde(rename = "flush.total_time", default, skip_serializing_if = "Option::is_none")]
    pub flush_total_time: Option<String>,  /// The number of current merges.
    #[serde(rename = "merges.current", default, skip_serializing_if = "Option::is_none")]
    pub merges_current: Option<String>,  /// The number of current merging docs.
    #[serde(rename = "merges.current_docs", default, skip_serializing_if = "Option::is_none")]
    pub merges_current_docs: Option<String>,  /// The number of delete operations.
    #[serde(rename = "indexing.delete_total", default, skip_serializing_if = "Option::is_none")]
    pub indexing_delete_total: Option<String>,  /// The size of current merges.
    #[serde(rename = "merges.current_size", default, skip_serializing_if = "Option::is_none")]
    pub merges_current_size: Option<String>,  /// The total refreshes.
    #[serde(rename = "refresh.total", default, skip_serializing_if = "Option::is_none")]
    pub refresh_total: Option<String>,  /// The request cache hit counts.
    #[serde(rename = "request_cache.hit_count", default, skip_serializing_if = "Option::is_none")]
    pub request_cache_hit_count: Option<String>,  /// The total machine memory.
    #[serde(rename = "ram.max", default, skip_serializing_if = "Option::is_none")]
    pub ram_max: Option<String>,  /// The total external refreshes.
    #[serde(rename = "refresh.external_total", default, skip_serializing_if = "Option::is_none")]
    pub refresh_external_total: Option<String>,  /// The query cache evictions.
    #[serde(rename = "query_cache.evictions", default, skip_serializing_if = "Option::is_none")]
    pub query_cache_evictions: Option<String>,  /// The total compiled scripts evicted from the cache.
    #[serde(rename = "script.cache_evictions", default, skip_serializing_if = "Option::is_none")]
    pub script_cache_evictions: Option<String>,  /// The open scroll contexts.
    #[serde(rename = "search.scroll_current", default, skip_serializing_if = "Option::is_none")]
    pub search_scroll_current: Option<String>,  /// The request cache evictions.
    #[serde(rename = "request_cache.evictions", default, skip_serializing_if = "Option::is_none")]
    pub request_cache_evictions: Option<String>,  /// The time spend in shard bulk.
    #[serde(rename = "bulk.total_time", default, skip_serializing_if = "Option::is_none")]
    pub bulk_total_time: Option<String>,  /// The memory used by fixed bit sets for nested object field types and export type filters for types referred in `_parent` fields.
    #[serde(rename = "segments.fixed_bitset_memory", default, skip_serializing_if = "Option::is_none")]
    pub segments_fixed_bitset_memory: Option<String>,  /// The number of current indexing operations.
    #[serde(rename = "indexing.index_current", default, skip_serializing_if = "Option::is_none")]
    pub indexing_index_current: Option<String>,  /// The total fetch operations.
    #[serde(rename = "search.fetch_total", default, skip_serializing_if = "Option::is_none")]
    pub search_fetch_total: Option<String>,
    #[serde(rename = "search.point_in_time_current", default, skip_serializing_if = "Option::is_none")]
    pub search_point_in_time_current: Option<String>,
    #[serde(rename = "ram.percent", default, skip_serializing_if = "Option::is_none")]
    pub ram_percent: Option<String>,  /// The number of current get ops.
    #[serde(rename = "get.current", default, skip_serializing_if = "Option::is_none")]
    pub get_current: Option<String>,
    #[serde(rename = "name", default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,  /// The memory used by segments.
    #[serde(rename = "segments.memory", default, skip_serializing_if = "Option::is_none")]
    pub segments_memory: Option<String>,  /// The time spent in refreshes.
    #[serde(rename = "refresh.time", default, skip_serializing_if = "Option::is_none")]
    pub refresh_time: Option<String>,  /// The Java version.
    #[serde(rename = "jdk", default, skip_serializing_if = "Option::is_none")]
    pub jdk: Option<String>,  /// The query cache miss counts.
    #[serde(rename = "query_cache.miss_count", default, skip_serializing_if = "Option::is_none")]
    pub query_cache_miss_count: Option<String>,  /// The time spent in fetch phase.
    #[serde(rename = "search.fetch_time", default, skip_serializing_if = "Option::is_none")]
    pub search_fetch_time: Option<String>,  /// The time scroll contexts held open.
    #[serde(rename = "search.scroll_time", default, skip_serializing_if = "Option::is_none")]
    pub search_scroll_time: Option<String>,
    #[serde(rename = "search.concurrent_query_time", default, skip_serializing_if = "Option::is_none")]
    pub search_concurrent_query_time: Option<String>,  /// The time spent in merges.
    #[serde(rename = "merges.total_time", default, skip_serializing_if = "Option::is_none")]
    pub merges_total_time: Option<String>,  /// The OpenSearch distribution type.
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,  /// The IP address.
    #[serde(rename = "ip", default, skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,  /// The number of failed indexing operations.
    #[serde(rename = "indexing.index_failed", default, skip_serializing_if = "Option::is_none")]
    pub indexing_index_failed: Option<String>,
    #[serde(rename = "search.concurrent_query_total", default, skip_serializing_if = "Option::is_none")]
    pub search_concurrent_query_total: Option<String>,
    #[serde(rename = "id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,  /// The used request cache.
    #[serde(rename = "request_cache.memory_size", default, skip_serializing_if = "Option::is_none")]
    pub request_cache_memory_size: Option<String>,  /// The size of completion.
    #[serde(rename = "completion.size", default, skip_serializing_if = "Option::is_none")]
    pub completion_size: Option<String>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "disk.avail", default, skip_serializing_if = "Option::is_none")]
    pub disk_avail: Option<String>,  /// The memory used by the index writer.
    #[serde(rename = "segments.index_writer_memory", default, skip_serializing_if = "Option::is_none")]
    pub segments_index_writer_memory: Option<String>,  /// The used field data cache.
    #[serde(rename = "fielddata.memory_size", default, skip_serializing_if = "Option::is_none")]
    pub fielddata_memory_size: Option<String>,  /// The query cache hit counts.
    #[serde(rename = "query_cache.hit_count", default, skip_serializing_if = "Option::is_none")]
    pub query_cache_hit_count: Option<String>,  /// The current fetch phase operations.
    #[serde(rename = "search.fetch_current", default, skip_serializing_if = "Option::is_none")]
    pub search_fetch_current: Option<String>,  /// The total size in bytes of shard bulk.
    #[serde(rename = "bulk.total_size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub bulk_total_size_in_bytes: Option<String>,  /// The bound HTTP address.
    #[serde(rename = "http_address", default, skip_serializing_if = "Option::is_none")]
    pub http_address: Option<String>,  /// The OpenSearch build hash.
    #[serde(rename = "build", default, skip_serializing_if = "Option::is_none")]
    pub build: Option<String>,  /// The recent system CPU usage as a percentage.
    #[serde(rename = "cpu", default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    #[serde(rename = "disk.used_percent", default, skip_serializing_if = "Option::is_none")]
    pub disk_used_percent: Option<String>,  /// The load average for the most recent minute.
    #[serde(rename = "load_1m", default, skip_serializing_if = "Option::is_none")]
    pub load_1_m: Option<String>,  /// The used query cache.
    #[serde(rename = "query_cache.memory_size", default, skip_serializing_if = "Option::is_none")]
    pub query_cache_memory_size: Option<String>,  /// The request cache miss counts.
    #[serde(rename = "request_cache.miss_count", default, skip_serializing_if = "Option::is_none")]
    pub request_cache_miss_count: Option<String>,  /// The script cache compilation limit triggered.
    #[serde(rename = "script.compilation_limit_triggered", default, skip_serializing_if = "Option::is_none")]
    pub script_compilation_limit_triggered: Option<String>,
    #[serde(rename = "search.concurrent_avg_slice_count", default, skip_serializing_if = "Option::is_none")]
    pub search_concurrent_avg_slice_count: Option<String>,  /// The average time spend in shard bulk.
    #[serde(rename = "bulk.avg_time", default, skip_serializing_if = "Option::is_none")]
    pub bulk_avg_time: Option<String>,  /// The total query phase operations.
    #[serde(rename = "search.query_total", default, skip_serializing_if = "Option::is_none")]
    pub search_query_total: Option<String>,  /// The open search contexts.
    #[serde(rename = "search.open_contexts", default, skip_serializing_if = "Option::is_none")]
    pub search_open_contexts: Option<String>,  /// The load average for the last five minutes.
    #[serde(rename = "load_5m", default, skip_serializing_if = "Option::is_none")]
    pub load_5_m: Option<String>,  /// The used heap.
    #[serde(rename = "heap.current", default, skip_serializing_if = "Option::is_none")]
    pub heap_current: Option<String>,  /// The size merged.
    #[serde(rename = "merges.total_size", default, skip_serializing_if = "Option::is_none")]
    pub merges_total_size: Option<String>,  /// The number of suggest operations.
    #[serde(rename = "suggest.total", default, skip_serializing_if = "Option::is_none")]
    pub suggest_total: Option<String>,  /// Indicates whether the node is the elected cluster-manager node.
  /// Returned values include `*`(elected cluster manager) and `-`(not elected cluster manager).
    #[serde(rename = "master", default, skip_serializing_if = "Option::is_none")]
    pub master: Option<String>,  /// The node uptime.
    #[serde(rename = "uptime", default, skip_serializing_if = "Option::is_none")]
    pub uptime: Option<String>,  /// The current query phase operations.
    #[serde(rename = "search.query_current", default, skip_serializing_if = "Option::is_none")]
    pub search_query_current: Option<String>,  /// The field data evictions.
    #[serde(rename = "fielddata.evictions", default, skip_serializing_if = "Option::is_none")]
    pub fielddata_evictions: Option<String>,  /// The time spent in external refreshes.
    #[serde(rename = "refresh.external_time", default, skip_serializing_if = "Option::is_none")]
    pub refresh_external_time: Option<String>,  /// The time spent in indexing.
    #[serde(rename = "indexing.index_time", default, skip_serializing_if = "Option::is_none")]
    pub indexing_index_time: Option<String>,  /// The load average for the last fifteen minutes.
    #[serde(rename = "load_15m", default, skip_serializing_if = "Option::is_none")]
    pub load_15_m: Option<String>,  /// The number of get ops.
    #[serde(rename = "get.total", default, skip_serializing_if = "Option::is_none")]
    pub get_total: Option<String>,  /// The process identifier.
    #[serde(rename = "pid", default, skip_serializing_if = "Option::is_none")]
    pub pid: Option<String>,  /// Indicates whether the node is the elected cluster-manager node.
  /// Returned values include `*`(elected cluster-manager) and `-`(not elected cluster-manager).
    #[serde(rename = "cluster_manager", default, skip_serializing_if = "Option::is_none")]
    pub cluster_manager: Option<String>,  /// The number of current deletions.
    #[serde(rename = "indexing.delete_current", default, skip_serializing_if = "Option::is_none")]
    pub indexing_delete_current: Option<String>,  /// The roles of the node.
  /// Returned values include `c`(cold node), `d`(data node), `f`(frozen node), `h`(hot node), `i`(ingest node), `l`(machine learning node), `m` (cluster-manager eligible node), `r`(remote cluster client node), `s`(content node), `t`(transform node), `v`(voting-only node), `w`(warm node),and `-`(coordinating node only).
    #[serde(rename = "node.role", default, skip_serializing_if = "Option::is_none")]
    pub node_role: Option<String>,  /// The docs merged.
    #[serde(rename = "merges.total_docs", default, skip_serializing_if = "Option::is_none")]
    pub merges_total_docs: Option<String>,  /// The used machine memory.
    #[serde(rename = "ram.current", default, skip_serializing_if = "Option::is_none")]
    pub ram_current: Option<String>,  /// The number of flushes.
    #[serde(rename = "flush.total", default, skip_serializing_if = "Option::is_none")]
    pub flush_total: Option<String>,
    #[serde(rename = "search.point_in_time_total", default, skip_serializing_if = "Option::is_none")]
    pub search_point_in_time_total: Option<String>,
}

impl NodesRecord {
    
    pub fn new() -> NodesRecord {
        NodesRecord {
            search_scroll_total: None,
            heap_percent: None,
            indexing_delete_time: None,
            suggest_time: None,
            file_desc_current: None,
            flavor: None,
            get_exists_time: None,
            disk_used: None,
            port: None,
            bulk_avg_size_in_bytes: None,
            search_query_time: None,
            search_concurrent_query_current: None,
            suggest_current: None,
            refresh_listeners: None,
            script_compilations: None,
            merges_total: None,
            segments_count: None,
            get_missing_total: None,
            bulk_total_operations: None,
            get_missing_time: None,
            heap_max: None,
            indexing_index_total: None,
            node_roles: None,
            search_point_in_time_time: None,
            file_desc_percent: None,
            segments_version_map_memory: None,
            get_exists_total: None,
            get_time: None,
            disk_total: None,
            file_desc_max: None,
            flush_total_time: None,
            merges_current: None,
            merges_current_docs: None,
            indexing_delete_total: None,
            merges_current_size: None,
            refresh_total: None,
            request_cache_hit_count: None,
            ram_max: None,
            refresh_external_total: None,
            query_cache_evictions: None,
            script_cache_evictions: None,
            search_scroll_current: None,
            request_cache_evictions: None,
            bulk_total_time: None,
            segments_fixed_bitset_memory: None,
            indexing_index_current: None,
            search_fetch_total: None,
            search_point_in_time_current: None,
            ram_percent: None,
            get_current: None,
            name: None,
            segments_memory: None,
            refresh_time: None,
            jdk: None,
            query_cache_miss_count: None,
            search_fetch_time: None,
            search_scroll_time: None,
            search_concurrent_query_time: None,
            merges_total_time: None,
            r#type: None,
            ip: None,
            indexing_index_failed: None,
            search_concurrent_query_total: None,
            id: None,
            request_cache_memory_size: None,
            completion_size: None,
            version: None,
            disk_avail: None,
            segments_index_writer_memory: None,
            fielddata_memory_size: None,
            query_cache_hit_count: None,
            search_fetch_current: None,
            bulk_total_size_in_bytes: None,
            http_address: None,
            build: None,
            cpu: None,
            disk_used_percent: None,
            load_1_m: None,
            query_cache_memory_size: None,
            request_cache_miss_count: None,
            script_compilation_limit_triggered: None,
            search_concurrent_avg_slice_count: None,
            bulk_avg_time: None,
            search_query_total: None,
            search_open_contexts: None,
            load_5_m: None,
            heap_current: None,
            merges_total_size: None,
            suggest_total: None,
            master: None,
            uptime: None,
            search_query_current: None,
            fielddata_evictions: None,
            refresh_external_time: None,
            indexing_index_time: None,
            load_15_m: None,
            get_total: None,
            pid: None,
            cluster_manager: None,
            indexing_delete_current: None,
            node_role: None,
            merges_total_docs: None,
            ram_current: None,
            flush_total: None,
            search_point_in_time_total: None,
        }
    }
}
