/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Buckets {  /// The start time.
    #[serde(rename = "start_time", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<u32>,  /// The overall aggregate value.
    #[serde(rename = "overall_aggregate_value", default, skip_serializing_if = "Option::is_none")]
    pub overall_aggregate_value: Option<f64>,  /// The end time.
    #[serde(rename = "end_time", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<u32>,
    #[serde(rename = "entities", default, skip_serializing_if = "Option::is_none")]
    pub entities: Option<Vec<ml::Entity>>,
}

impl Buckets {
    
    pub fn new() -> Buckets {
        Buckets {
            start_time: None,
            overall_aggregate_value: None,
            end_time: None,
            entities: None,
        }
    }
}
