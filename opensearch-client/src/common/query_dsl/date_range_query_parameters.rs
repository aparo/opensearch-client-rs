/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DateRangeQueryParameters {
    #[serde(rename = "lt", default, skip_serializing_if = "Option::is_none")]
    pub lt: Option<String>,
    #[serde(rename = "format", default, skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "lte", default, skip_serializing_if = "Option::is_none")]
    pub lte: Option<String>,
    #[serde(rename = "gt", default, skip_serializing_if = "Option::is_none")]
    pub gt: Option<String>,
    #[serde(rename = "gte", default, skip_serializing_if = "Option::is_none")]
    pub gte: Option<String>,
    #[serde(rename = "time_zone", default, skip_serializing_if = "Option::is_none")]
    pub time_zone: Option<String>,
}

impl DateRangeQueryParameters {
    
    pub fn new() -> DateRangeQueryParameters {
        DateRangeQueryParameters {
            lt: None,
            format: None,
            lte: None,
            gt: None,
            gte: None,
            time_zone: None,
        }
    }
}
