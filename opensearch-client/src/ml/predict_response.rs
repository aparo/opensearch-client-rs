/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredictResponse {
    #[serde(rename = "inference_results", default, skip_serializing_if = "Option::is_none")]
    pub inference_results: Option<Vec<ml::InferenceResults>>,  /// The status.
    #[serde(rename = "status", default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "prediction_result", default, skip_serializing_if = "Option::is_none")]
    pub prediction_result: Option<ml::PredictionResult>,
}

impl PredictResponse {
    
    pub fn new() -> PredictResponse {
        PredictResponse {
            inference_results: None,
            status: None,
            prediction_result: None,
        }
    }
}
