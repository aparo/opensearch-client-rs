/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OperatingSystem {
    #[serde(rename = "cpu", default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<nodes::stats::OperatingSystemCpuStats>,
    #[serde(rename = "swap", default, skip_serializing_if = "Option::is_none")]
    pub swap: Option<String>,
    #[serde(rename = "cgroup", default, skip_serializing_if = "Option::is_none")]
    pub cgroup: Option<nodes::stats::CgroupStats>,
    #[serde(rename = "mem", default, skip_serializing_if = "Option::is_none")]
    pub mem: Option<String>,
    #[serde(rename = "timestamp", default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl OperatingSystem {
    
    pub fn new() -> OperatingSystem {
        OperatingSystem {
            cpu: None,
            swap: None,
            cgroup: None,
            mem: None,
            timestamp: None,
        }
    }
}
