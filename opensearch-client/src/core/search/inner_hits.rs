/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::core;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InnerHits {
    #[serde(rename = "collapse", default, skip_serializing_if = "Option::is_none")]
    pub collapse: Option<core::search::FieldCollapse>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<common::Fields>,
    #[serde(rename = "stored_fields", default, skip_serializing_if = "Option::is_none")]
    pub stored_fields: Option<common::Fields>,  /// The maximum number of hits to return per `inner_hits`.
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<u32>,
    #[serde(rename = "script_fields", default, skip_serializing_if = "Option::is_none")]
    pub script_fields: Option<serde_json::Value>,
    #[serde(rename = "highlight", default, skip_serializing_if = "Option::is_none")]
    pub highlight: Option<String>,
    #[serde(rename = "seq_no_primary_term", default, skip_serializing_if = "Option::is_none")]
    pub seq_no_primary_term: Option<bool>,
    #[serde(rename = "track_scores", default, skip_serializing_if = "Option::is_none")]
    pub track_scores: Option<bool>,
    #[serde(rename = "docvalue_fields", default, skip_serializing_if = "Option::is_none")]
    pub docvalue_fields: Option<Vec<common::query_dsl::FieldAndFormat>>,
    #[serde(rename = "name", default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<bool>,  /// Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<core::search::SourceConfig>,
    #[serde(rename = "explain", default, skip_serializing_if = "Option::is_none")]
    pub explain: Option<bool>,  /// The inner hit that initiates document offset.
    #[serde(rename = "from", default, skip_serializing_if = "Option::is_none")]
    pub from: Option<u32>,
    #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<common::Sort>,
    #[serde(rename = "ignore_unmapped", default, skip_serializing_if = "Option::is_none")]
    pub ignore_unmapped: Option<bool>,
}

impl InnerHits {
    
    pub fn new() -> InnerHits {
        InnerHits {
            collapse: None,
            fields: None,
            stored_fields: None,
            size: None,
            script_fields: None,
            highlight: None,
            seq_no_primary_term: None,
            track_scores: None,
            docvalue_fields: None,
            name: None,
            version: None,
            source: None,
            explain: None,
            from: None,
            sort: None,
            ignore_unmapped: None,
        }
    }
}
