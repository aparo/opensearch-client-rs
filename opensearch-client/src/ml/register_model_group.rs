/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterModelGroup {  /// The model group access mode.
    #[serde(rename = "access_mode", default, skip_serializing_if = "Option::is_none")]
    pub access_mode: Option<String>,  /// The backend roles.
    #[serde(rename = "backend_roles", default, skip_serializing_if = "Option::is_none")]
    pub backend_roles: Option<Vec<String>>,  /// The model group name.
    #[serde(rename = "name")]
    pub name: String,  /// The add all backend roles.
    #[serde(rename = "add_all_backend_roles", default, skip_serializing_if = "Option::is_none")]
    pub add_all_backend_roles: Option<bool>,  /// The model group description.
    #[serde(rename = "description", default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl RegisterModelGroup {
    
    pub fn new(name: String) -> RegisterModelGroup {
        RegisterModelGroup {
            access_mode: None,
            backend_roles: None,
            name,
            add_all_backend_roles: None,
            description: None,
        }
    }
}
