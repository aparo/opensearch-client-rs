/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MultisearchHeader {  /// A comma-separated list of data streams, indexes, and aliases used to limit the request.
  /// Supports wildcards (`*`).
  /// To target all data streams and indexes, omit this parameter or use `*` or `_all`.
    #[serde(rename = "index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<common::Indices>,
    #[serde(rename = "allow_partial_search_results", default, skip_serializing_if = "Option::is_none")]
    pub allow_partial_search_results: Option<bool>,
    #[serde(rename = "ignore_throttled", default, skip_serializing_if = "Option::is_none")]
    pub ignore_throttled: Option<bool>,
    #[serde(rename = "preference", default, skip_serializing_if = "Option::is_none")]
    pub preference: Option<String>,  /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
    #[serde(rename = "expand_wildcards", default, skip_serializing_if = "Option::is_none")]
    pub expand_wildcards: Option<common::ExpandWildcards>,
    #[serde(rename = "request_cache", default, skip_serializing_if = "Option::is_none")]
    pub request_cache: Option<bool>,
    #[serde(rename = "allow_no_indices", default, skip_serializing_if = "Option::is_none")]
    pub allow_no_indices: Option<bool>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    #[serde(rename = "ignore_unavailable", default, skip_serializing_if = "Option::is_none")]
    pub ignore_unavailable: Option<bool>,
    #[serde(rename = "ccs_minimize_roundtrips", default, skip_serializing_if = "Option::is_none")]
    pub ccs_minimize_roundtrips: Option<bool>,
    #[serde(rename = "search_type", default, skip_serializing_if = "Option::is_none")]
    pub search_type: Option<common::SearchType>,
}

impl MultisearchHeader {
    
    pub fn new() -> MultisearchHeader {
        MultisearchHeader {
            index: None,
            allow_partial_search_results: None,
            ignore_throttled: None,
            preference: None,
            expand_wildcards: None,
            request_cache: None,
            allow_no_indices: None,
            routing: None,
            ignore_unavailable: None,
            ccs_minimize_roundtrips: None,
            search_type: None,
        }
    }
}
