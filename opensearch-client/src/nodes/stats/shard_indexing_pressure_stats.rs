/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardIndexingPressureStats {
    #[serde(rename = "total_rejections_breakup_shadow_mode", default, skip_serializing_if = "Option::is_none")]
    pub total_rejections_breakup_shadow_mode: Option<nodes::stats::ShardIndexingPressureRejectionsBreakupStats>,
    #[serde(rename = "enabled", default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "enforced", default, skip_serializing_if = "Option::is_none")]
    pub enforced: Option<bool>,
    #[serde(rename = "total_rejections_breakup", default, skip_serializing_if = "Option::is_none")]
    pub total_rejections_breakup: Option<nodes::stats::ShardIndexingPressureRejectionsBreakupStats>,
    #[serde(rename = "stats", default, skip_serializing_if = "Option::is_none")]
    pub stats: Option<serde_json::Value>,
}

impl ShardIndexingPressureStats {
    
    pub fn new() -> ShardIndexingPressureStats {
        ShardIndexingPressureStats {
            total_rejections_breakup_shadow_mode: None,
            enabled: None,
            enforced: None,
            total_rejections_breakup: None,
            stats: None,
        }
    }
}
