/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrainModel {
    #[serde(rename = "method", default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "dimension")]
    pub dimension: u32,
    #[serde(rename = "max_training_vector_count", default, skip_serializing_if = "Option::is_none")]
    pub max_training_vector_count: Option<u32>,
    #[serde(rename = "spaceType", default, skip_serializing_if = "Option::is_none")]
    pub space_type: Option<String>,
    #[serde(rename = "description", default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "search_size", default, skip_serializing_if = "Option::is_none")]
    pub search_size: Option<u32>,
    #[serde(rename = "compression_level", default, skip_serializing_if = "Option::is_none")]
    pub compression_level: Option<String>,
    #[serde(rename = "training_index")]
    pub training_index: String,
    #[serde(rename = "training_field")]
    pub training_field: String,
    #[serde(rename = "mode", default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

impl TrainModel {
    
    pub fn new(dimension: u32, training_index: String, training_field: String) -> TrainModel {
        TrainModel {
            method: None,
            dimension,
            max_training_vector_count: None,
            space_type: None,
            description: None,
            search_size: None,
            compression_level: None,
            training_index,
            training_field,
            mode: None,
        }
    }
}
