/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};



#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StringOrStringArray {
    StringValue(String),
    ArrayValue(Vec<String>),
}

impl std::fmt::Display for StringOrStringArray {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            StringOrStringArray::StringValue(s) => write!(f, "{}", s),
            StringOrStringArray::ArrayValue(v) => write!(f, "{}", v.join(",")),
        }
    }
}


impl StringOrStringArray {
    pub fn as_vec(&self) -> Vec<String> {
        match self {
            StringOrStringArray::StringValue(s) => vec![s.clone()],
            StringOrStringArray::ArrayValue(v) => v.clone(),
        }
    }
}

impl Default for StringOrStringArray {
    fn default() -> Self {
        StringOrStringArray::ArrayValue(Vec::new())
    }
}

// Allow constructing StringOrStringArray from String
impl From<String> for StringOrStringArray {
    fn from(s: String) -> Self {
        StringOrStringArray::StringValue(s)
    }
}

// Allow constructing StringOrStringArray from &str
impl From<&str> for StringOrStringArray {
    fn from(s: &str) -> Self {
        StringOrStringArray::StringValue(s.to_string())
    }
}

// Allow constructing StringOrStringArray from Vec<String>
impl From<Vec<String>> for StringOrStringArray {
    fn from(v: Vec<String>) -> Self {
        StringOrStringArray::ArrayValue(v)
    }
}

// Allow constructing StringOrStringArray from Vec<&str>
impl From<Vec<&str>> for StringOrStringArray {
    fn from(v: Vec<&str>) -> Self {
        StringOrStringArray::ArrayValue(v.into_iter().map(|s| s.to_string()).collect())
    }
}
