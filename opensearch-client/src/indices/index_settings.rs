/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::indices;
use serde::{Deserialize, Serialize};

/// IndexSettings
/// The index settings to be updated.

#[derive(Clone, Default, Debug, Serialize, Deserialize)]
pub struct IndexSettings {
    #[serde(rename = "lifecycle", default, skip_serializing_if = "Option::is_none")]
    pub lifecycle: Option<indices::IndexSettingsLifecycle>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "load_fixed_bitset_filters_eagerly",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub load_fixed_bitset_filters_eagerly: Option<common::StringifiedBoolean>,
    #[serde(rename = "merge", default, skip_serializing_if = "Option::is_none")]
    pub merge: Option<indices::IndexSettingsMerge>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_slices_per_scroll",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_slices_per_scroll: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "blocks.read_only",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_read_only: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_refresh_listeners",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_refresh_listeners: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_script_fields",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_script_fields: Option<common::StringifiedInteger>,
    #[serde(rename = "mode", default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(
        rename = "indexing_pressure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub indexing_pressure: Option<indices::IndexingPressure>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_ngram_diff",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_ngram_diff: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "number_of_replicas",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_replicas: Option<common::StringifiedInteger>,
    #[serde(
        rename = "final_pipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub final_pipeline: Option<String>,
    #[serde(
        rename = "translog.durability",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub translog_durability: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(rename = "hidden", default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_docvalue_fields_search",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_docvalue_fields_search: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "blocks.read",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_read: Option<common::StringifiedBoolean>,
    #[serde(
        rename = "soft_deletes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub soft_deletes: Option<indices::SoftDeletes>,
    #[serde(
        rename = "check_on_startup",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub check_on_startup: Option<String>,
    #[serde(
        rename = "lifecycle.name",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub lifecycle_name: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "query_string.lenient",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string_lenient: Option<common::StringifiedBoolean>,
    /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
    /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(
        rename = "search.idle.after",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub search_idle_after: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(rename = "knn", default, skip_serializing_if = "Option::is_none")]
    pub knn: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_shingle_diff",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_shingle_diff: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "highlight.max_analyzed_offset",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub highlight_max_analyzed_offset: Option<common::StringifiedInteger>,
    #[serde(
        rename = "provided_name",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub provided_name: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "routing_partition_size",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub routing_partition_size: Option<common::StringifiedInteger>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<indices::IndexVersioning>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_regex_length",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_regex_length: Option<common::StringifiedInteger>,
    #[serde(
        rename = "translog.flush_threshold_size",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub translog_flush_threshold_size: Option<String>,
    #[serde(
        rename = "similarity",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub similarity: Option<indices::IndexSettingsSimilarity>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_terms_count",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_terms_count: Option<common::StringifiedInteger>,
    #[serde(rename = "codec", default, skip_serializing_if = "Option::is_none")]
    pub codec: Option<String>,
    /// A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
    /// number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
    /// representation.
    #[serde(
        rename = "creation_date_string",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date_string: Option<common::DateTime>,
    /// The index settings to be updated.
    #[serde(rename = "settings", default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<Box<indices::IndexSettings>>,
    #[serde(rename = "search", default, skip_serializing_if = "Option::is_none")]
    pub search: Option<indices::IndexSettingsSearch>,
    /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
    /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(
        rename = "soft_deletes.retention_lease.period",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub soft_deletes_retention_lease_period: Option<String>,
    #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<indices::IndexSegmentSort>,
    #[serde(rename = "uuid", default, skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "merge.scheduler.max_thread_count",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub merge_scheduler_max_thread_count: Option<common::StringifiedInteger>,
    #[serde(rename = "highlight", default, skip_serializing_if = "Option::is_none")]
    pub highlight: Option<indices::IndexSettingsHighlight>,
    #[serde(
        rename = "default_pipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_pipeline: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_inner_result_window",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_inner_result_window: Option<common::StringifiedInteger>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "number_of_routing_shards",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_routing_shards: Option<common::StringifiedInteger>,
    #[serde(rename = "analysis", default, skip_serializing_if = "Option::is_none")]
    pub analysis: Option<indices::IndexSettingsAnalysis>,
    #[serde(rename = "indexing", default, skip_serializing_if = "Option::is_none")]
    pub indexing: Option<indices::IndexSettingsIndexing>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "number_of_shards",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub number_of_shards: Option<common::StringifiedInteger>,
    #[serde(rename = "analyze", default, skip_serializing_if = "Option::is_none")]
    pub analyze: Option<indices::IndexSettingsAnalyze>,
    /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
    /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(
        rename = "refresh_interval",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub refresh_interval: Option<String>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<indices::IndexRouting>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_rescore_window",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_rescore_window: Option<common::StringifiedInteger>,
    #[serde(rename = "blocks", default, skip_serializing_if = "Option::is_none")]
    pub blocks: Option<indices::IndexSettingBlocks>,
    #[serde(
        rename = "routing_path",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub routing_path: Option<common::StringOrStringArray>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "creation_date",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<common::StringifiedEpochTimeUnitMillis>,
    /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
    /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(
        rename = "gc_deletes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub gc_deletes: Option<String>,
    #[serde(
        rename = "query_string",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_string: Option<indices::IndexSettingsQueryString>,
    #[serde(
        rename = "composite_index.star_tree",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub composite_index_star_tree: Option<indices::IndexSettingsStarTree>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "top_metrics_max_size",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub top_metrics_max_size: Option<common::StringifiedInteger>,
    /// The index settings to be updated.
    #[serde(rename = "index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<Box<indices::IndexSettings>>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "blocks.metadata",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_metadata: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "max_result_window",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_result_window: Option<common::StringifiedInteger>,
    #[serde(
        rename = "auto_expand_replicas",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_expand_replicas: Option<String>,
    #[serde(rename = "store", default, skip_serializing_if = "Option::is_none")]
    pub store: Option<indices::IndexSettingsStore>,
    #[serde(rename = "translog", default, skip_serializing_if = "Option::is_none")]
    pub translog: Option<indices::Translog>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "analyze.max_token_count",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub analyze_max_token_count: Option<common::StringifiedInteger>,
    #[serde(rename = "mapping", default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<indices::IndexSettingsMapping>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "verified_before_close",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub verified_before_close: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "blocks.read_only_allow_delete",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_read_only_allow_delete: Option<common::StringifiedBoolean>,
    #[serde(rename = "queries", default, skip_serializing_if = "Option::is_none")]
    pub queries: Option<indices::IndexSettingsQueries>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "blocks.write",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub blocks_write: Option<common::StringifiedBoolean>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(
        rename = "knn.algo_param.ef_search",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub knn_algo_param_ef_search: Option<common::StringifiedInteger>,
}

impl IndexSettings {
    /// The index settings to be updated.
    pub fn new() -> IndexSettings {
        IndexSettings {
            lifecycle: None,
            load_fixed_bitset_filters_eagerly: None,
            merge: None,
            max_slices_per_scroll: None,
            blocks_read_only: None,
            max_refresh_listeners: None,
            max_script_fields: None,
            mode: None,
            indexing_pressure: None,
            max_ngram_diff: None,
            number_of_replicas: None,
            final_pipeline: None,
            translog_durability: None,
            hidden: None,
            max_docvalue_fields_search: None,
            blocks_read: None,
            soft_deletes: None,
            check_on_startup: None,
            lifecycle_name: None,
            query_string_lenient: None,
            search_idle_after: None,
            knn: None,
            max_shingle_diff: None,
            highlight_max_analyzed_offset: None,
            provided_name: None,
            routing_partition_size: None,
            version: None,
            max_regex_length: None,
            translog_flush_threshold_size: None,
            similarity: None,
            max_terms_count: None,
            codec: None,
            creation_date_string: None,
            settings: None,
            search: None,
            soft_deletes_retention_lease_period: None,
            sort: None,
            uuid: None,
            merge_scheduler_max_thread_count: None,
            highlight: None,
            default_pipeline: None,
            max_inner_result_window: None,
            number_of_routing_shards: None,
            analysis: None,
            indexing: None,
            number_of_shards: None,
            analyze: None,
            refresh_interval: None,
            routing: None,
            max_rescore_window: None,
            blocks: None,
            routing_path: None,
            creation_date: None,
            gc_deletes: None,
            query_string: None,
            composite_index_star_tree: None,
            top_metrics_max_size: None,
            index: None,
            blocks_metadata: None,
            max_result_window: None,
            auto_expand_replicas: None,
            store: None,
            translog: None,
            analyze_max_token_count: None,
            mapping: None,
            verified_before_close: None,
            blocks_read_only_allow_delete: None,
            queries: None,
            blocks_write: None,
            knn_algo_param_ef_search: None,
        }
    }

    pub fn clean_for_create(&self) -> Self {
        let mut clone = self.clone();
        clone.uuid = None;
        clone.creation_date = None;
        clone.version = None;
        clone
    }
}
