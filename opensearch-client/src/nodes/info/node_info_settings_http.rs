/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeInfoSettingsHttp {
    #[serde(rename = "type.default", default, skip_serializing_if = "Option::is_none")]
    pub type_default: Option<String>,
    #[serde(rename = "type")]
    pub r#type: nodes::info::NodeInfoSettingsHttpType,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "compression", default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<common::StringifiedBoolean>,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "port", default, skip_serializing_if = "Option::is_none")]
    pub port: Option<common::StringifiedInteger>,
}

impl NodeInfoSettingsHttp {
    
    pub fn new(r#type: nodes::info::NodeInfoSettingsHttpType) -> NodeInfoSettingsHttp {
        NodeInfoSettingsHttp {
            type_default: None,
            r#type,
            compression: None,
            port: None,
        }
    }
}
