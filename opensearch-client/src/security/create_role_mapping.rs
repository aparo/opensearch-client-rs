/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateRoleMapping {
    #[serde(rename = "and_backend_roles", default, skip_serializing_if = "Option::is_none")]
    pub and_backend_roles: Option<Vec<String>>,
    #[serde(rename = "backend_roles", default, skip_serializing_if = "Option::is_none")]
    pub backend_roles: Option<Vec<String>>,
    #[serde(rename = "description", default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "hosts", default, skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
    #[serde(rename = "hidden", default, skip_serializing_if = "Option::is_none")]
    pub hidden: Option<bool>,
    #[serde(rename = "reserved", default, skip_serializing_if = "Option::is_none")]
    pub reserved: Option<bool>,
    #[serde(rename = "users", default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
}

impl CreateRoleMapping {
    
    pub fn new() -> CreateRoleMapping {
        CreateRoleMapping {
            and_backend_roles: None,
            backend_roles: None,
            description: None,
            hosts: None,
            hidden: None,
            reserved: None,
            users: None,
        }
    }
}
