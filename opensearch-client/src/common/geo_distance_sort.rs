/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GeoDistanceSort {
    #[serde(rename = "distance_type", default, skip_serializing_if = "Option::is_none")]
    pub distance_type: Option<String>,
    #[serde(rename = "unit", default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<common::DistanceUnit>,
    #[serde(rename = "mode", default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "order", default, skip_serializing_if = "Option::is_none")]
    pub order: Option<String>,
    #[serde(rename = "ignore_unmapped", default, skip_serializing_if = "Option::is_none")]
    pub ignore_unmapped: Option<bool>,
}

impl GeoDistanceSort {
    
    pub fn new() -> GeoDistanceSort {
        GeoDistanceSort {
            distance_type: None,
            unit: None,
            mode: None,
            order: None,
            ignore_unmapped: None,
        }
    }
}
