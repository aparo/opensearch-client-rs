/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::tasks;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetResponse {
    #[serde(rename = "task")]
    pub task: String,
    #[serde(rename = "error", default, skip_serializing_if = "Option::is_none")]
    pub error: Option<common::ErrorCause>,
    #[serde(rename = "completed")]
    pub completed: bool,
    #[serde(rename = "response", default, skip_serializing_if = "Option::is_none")]
    pub response: Option<tasks::TaskResponse>,
}

impl GetResponse {
    
    pub fn new(task: String, completed: bool) -> GetResponse {
        GetResponse {
            task,
            error: None,
            completed,
            response: None,
        }
    }
}
