/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypeMapping {
    #[serde(rename = "numeric_detection", default, skip_serializing_if = "Option::is_none")]
    pub numeric_detection: Option<bool>,
    #[serde(rename = "all_field", default, skip_serializing_if = "Option::is_none")]
    pub all_field: Option<common::mapping::AllField>,
    #[serde(rename = "enabled", default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "_data_stream_timestamp", default, skip_serializing_if = "Option::is_none")]
    pub data_stream_timestamp: Option<common::mapping::DataStreamTimestamp>,
    #[serde(rename = "dynamic", default, skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<String>,
    #[serde(rename = "_routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<common::mapping::RoutingField>,
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<common::mapping::SourceField>,
    #[serde(rename = "_size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<common::mapping::SizeField>,
    #[serde(rename = "properties", default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "index_field", default, skip_serializing_if = "Option::is_none")]
    pub index_field: Option<common::mapping::IndexField>,
    #[serde(rename = "_meta", default, skip_serializing_if = "Option::is_none")]
    pub meta: Option<common::Metadata>,
    #[serde(rename = "_field_names", default, skip_serializing_if = "Option::is_none")]
    pub field_names: Option<common::mapping::FieldNamesField>,
    #[serde(rename = "date_detection", default, skip_serializing_if = "Option::is_none")]
    pub date_detection: Option<bool>,
    #[serde(rename = "dynamic_date_formats", default, skip_serializing_if = "Option::is_none")]
    pub dynamic_date_formats: Option<Vec<String>>,
    #[serde(rename = "dynamic_templates", default, skip_serializing_if = "Option::is_none")]
    pub dynamic_templates: Option<Vec<serde_json::Value>>,
}

impl TypeMapping {
    
    pub fn new() -> TypeMapping {
        TypeMapping {
            numeric_detection: None,
            all_field: None,
            enabled: None,
            data_stream_timestamp: None,
            dynamic: None,
            routing: None,
            source: None,
            size: None,
            properties: None,
            index_field: None,
            meta: None,
            field_names: None,
            date_detection: None,
            dynamic_date_formats: None,
            dynamic_templates: None,
        }
    }
}
