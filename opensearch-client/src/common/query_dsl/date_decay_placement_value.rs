/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DateDecayPlacementValue {  /// A date and time, either as a string whose format depends on the context (defaulting to ISO_8601) or the
  /// number of milliseconds since the epoch. OpenSearch accepts both as an input but will generally output a string.
  /// representation.
    #[serde(rename = "origin", default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<common::DateTime>,  /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(rename = "offset", default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<String>,
    #[serde(rename = "decay", default, skip_serializing_if = "Option::is_none")]
    pub decay: Option<f64>,  /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(rename = "scale", default, skip_serializing_if = "Option::is_none")]
    pub scale: Option<String>,
}

impl DateDecayPlacementValue {
    
    pub fn new() -> DateDecayPlacementValue {
        DateDecayPlacementValue {
            origin: None,
            offset: None,
            decay: None,
            scale: None,
        }
    }
}
