/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TermVectorsResult {
    #[serde(rename = "took", default, skip_serializing_if = "Option::is_none")]
    pub took: Option<u32>,
    #[serde(rename = "_version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
    #[serde(rename = "_index")]
    pub index: String,
    #[serde(rename = "term_vectors", default, skip_serializing_if = "Option::is_none")]
    pub term_vectors: Option<serde_json::Value>,
    #[serde(rename = "found", default, skip_serializing_if = "Option::is_none")]
    pub found: Option<bool>,
    #[serde(rename = "error", default, skip_serializing_if = "Option::is_none")]
    pub error: Option<common::ErrorCause>,
    #[serde(rename = "_id")]
    pub id: String,
}

impl TermVectorsResult {
    
    pub fn new(index: String, id: String) -> TermVectorsResult {
        TermVectorsResult {
            took: None,
            version: None,
            index,
            term_vectors: None,
            found: None,
            error: None,
            id,
        }
    }
}
