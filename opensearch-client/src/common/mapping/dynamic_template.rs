/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DynamicTemplate {
    #[serde(rename = "path_match", default, skip_serializing_if = "Option::is_none")]
    pub path_match: Option<String>,
    #[serde(rename = "path_unmatch", default, skip_serializing_if = "Option::is_none")]
    pub path_unmatch: Option<String>,
    #[serde(rename = "unmatch", default, skip_serializing_if = "Option::is_none")]
    pub unmatch: Option<String>,
    #[serde(rename = "match", default, skip_serializing_if = "Option::is_none")]
    pub r#match: Option<String>,
    #[serde(rename = "match_mapping_type", default, skip_serializing_if = "Option::is_none")]
    pub match_mapping_type: Option<String>,
    #[serde(rename = "mapping", default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<common::mapping::Property>,
    #[serde(rename = "match_pattern", default, skip_serializing_if = "Option::is_none")]
    pub match_pattern: Option<String>,
}

impl DynamicTemplate {
    
    pub fn new() -> DynamicTemplate {
        DynamicTemplate {
            path_match: None,
            path_unmatch: None,
            unmatch: None,
           r#match: None,
            match_mapping_type: None,
            mapping: None,
            match_pattern: None,
        }
    }
}
