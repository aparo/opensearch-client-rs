/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::indices;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidateQueryResponse {
    #[serde(rename = "error", default, skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    #[serde(
        rename = "explanations",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub explanations: Option<Vec<indices::validate_query::IndicesValidationExplanation>>,
    #[serde(rename = "valid")]
    pub valid: bool,
    #[serde(rename = "_shards", default, skip_serializing_if = "Option::is_none")]
    pub shards: Option<common::ShardStatistics>,
}

impl ValidateQueryResponse {
    pub fn new(valid: bool) -> ValidateQueryResponse {
        ValidateQueryResponse {
            error: None,
            explanations: None,
            valid,
            shards: None,
        }
    }
}
