/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExplainResponse {
    #[serde(rename = "explanation", default, skip_serializing_if = "Option::is_none")]
    pub explanation: Option<core::explain::ExplanationDetail>,
    #[serde(rename = "_index")]
    pub index: String,
    #[serde(rename = "matched")]
    pub matched: bool,
    #[serde(rename = "get", default, skip_serializing_if = "Option::is_none")]
    pub get: Option<common::InlineGet>,
    #[serde(rename = "_id")]
    pub id: String,
}

impl ExplainResponse {
    
    pub fn new(index: String, matched: bool, id: String) -> ExplainResponse {
        ExplainResponse {
            explanation: None,
            index,
            matched,
            get: None,
            id,
        }
    }
}
