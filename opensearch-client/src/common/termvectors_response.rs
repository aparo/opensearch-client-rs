/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TermvectorsResponse {
    #[serde(rename = "found")]
    pub found: bool,
    #[serde(rename = "_index")]
    pub index: String,
    #[serde(rename = "_id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "term_vectors", default, skip_serializing_if = "Option::is_none")]
    pub term_vectors: Option<serde_json::Value>,
    #[serde(rename = "took")]
    pub took: u32,
    #[serde(rename = "_version")]
    pub version: u32,
}

impl TermvectorsResponse {
    
    pub fn new(found: bool, index: String, took: u32, version: u32) -> TermvectorsResponse {
        TermvectorsResponse {
            found,
            index,
            id: None,
            term_vectors: None,
            took,
            version,
        }
    }
}
