/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Breaker {
    #[serde(rename = "estimated_size", default, skip_serializing_if = "Option::is_none")]
    pub estimated_size: Option<String>,
    #[serde(rename = "limit_size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub limit_size_in_bytes: Option<u32>,  /// A constant that all estimates for the circuit breaker are multiplied with to calculate a final estimate.
    #[serde(rename = "overhead", default, skip_serializing_if = "Option::is_none")]
    pub overhead: Option<f64>,
    #[serde(rename = "estimated_size_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub estimated_size_in_bytes: Option<u32>,  /// Total number of times the circuit breaker has been triggered and prevented an out of memory error.
    #[serde(rename = "tripped", default, skip_serializing_if = "Option::is_none")]
    pub tripped: Option<u32>,
    #[serde(rename = "limit_size", default, skip_serializing_if = "Option::is_none")]
    pub limit_size: Option<String>,
}

impl Breaker {
    
    pub fn new() -> Breaker {
        Breaker {
            estimated_size: None,
            limit_size_in_bytes: None,
            overhead: None,
            estimated_size_in_bytes: None,
            tripped: None,
            limit_size: None,
        }
    }
}
