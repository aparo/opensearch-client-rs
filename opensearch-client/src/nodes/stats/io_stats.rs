/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoStats {  /// Array of disk metrics for each device that is backing an OpenSearch data path.
  /// These disk metrics are probed periodically and averages between the last probe and the current probe are computed.
    #[serde(rename = "devices", default, skip_serializing_if = "Option::is_none")]
    pub devices: Option<Vec<nodes::stats::IoStatDevice>>,
    #[serde(rename = "total", default, skip_serializing_if = "Option::is_none")]
    pub total: Option<nodes::stats::IoStatDevice>,
}

impl IoStats {
    
    pub fn new() -> IoStats {
        IoStats {
            devices: None,
            total: None,
        }
    }
}
