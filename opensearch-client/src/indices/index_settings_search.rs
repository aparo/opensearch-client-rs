/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::indices;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndexSettingsSearch {
    #[serde(
        rename = "concurrent",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub concurrent: Option<indices::IndexSettingsSearchConcurrent>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(rename = "throttled", default, skip_serializing_if = "Option::is_none")]
    pub throttled: Option<common::StringifiedBoolean>,
    #[serde(
        rename = "concurrent_segment_search",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub concurrent_segment_search: Option<indices::IndexSettingsSearchConcurrentSegmentSearch>,
    #[serde(rename = "slowlog", default, skip_serializing_if = "Option::is_none")]
    pub slowlog: Option<indices::SearchSlowlog>,
    #[serde(rename = "idle", default, skip_serializing_if = "Option::is_none")]
    pub idle: Option<indices::SearchIdle>,
    #[serde(
        rename = "default_pipeline",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub default_pipeline: Option<String>,
}

impl IndexSettingsSearch {
    pub fn new() -> IndexSettingsSearch {
        IndexSettingsSearch {
            concurrent: None,
            throttled: None,
            concurrent_segment_search: None,
            slowlog: None,
            idle: None,
            default_pipeline: None,
        }
    }
}
