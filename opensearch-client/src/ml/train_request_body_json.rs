/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrainRequestBodyJson {
    #[serde(rename = "input_query", default, skip_serializing_if = "Option::is_none")]
    pub input_query: Option<ml::InputQuery>,
    #[serde(rename = "parameters", default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<ml::TrainParameters>,  /// The input index.
    #[serde(rename = "input_index", default, skip_serializing_if = "Option::is_none")]
    pub input_index: Option<Vec<String>>,
}

impl TrainRequestBodyJson {
    
    pub fn new() -> TrainRequestBodyJson {
        TrainRequestBodyJson {
            input_query: None,
            parameters: None,
            input_index: None,
        }
    }
}
