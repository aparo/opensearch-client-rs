/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RankEvalMetricDetail {  /// The `hits` section provides a grouping of the search results with their supplied ratings.
    #[serde(rename = "hits")]
    pub hits: Vec<core::rank_eval::RankEvalHitItem>,  /// The `metric_details` section provides additional information about the calculated quality metric indicating the number of relevant retrieved documents. The content varies for each metric but allows for better interpretation of the results.
    #[serde(rename = "metric_details")]
    pub metric_details: serde_json::Value,  /// The `metric_score`, found in the `metric_details` section, shows the contribution of this query to the global quality metric score.
    #[serde(rename = "metric_score")]
    pub metric_score: f64,  /// The `unrated_docs` section contains an `_index` and `_id` entry for each document that didn't have a `ratings` value. This can be used to ask the user to supply ratings for these documents.
    #[serde(rename = "unrated_docs")]
    pub unrated_docs: Vec<core::rank_eval::UnratedDocument>,
}

impl RankEvalMetricDetail {
    
    pub fn new(hits: Vec<core::rank_eval::RankEvalHitItem>, metric_details: serde_json::Value, metric_score: f64, unrated_docs: Vec<core::rank_eval::UnratedDocument>) -> RankEvalMetricDetail {
        RankEvalMetricDetail {
            hits,
            metric_details,
            metric_score,
            unrated_docs,
        }
    }
}
