/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardSearchPipelinePerPipelineStats {
    #[serde(rename = "response_processors", default, skip_serializing_if = "Option::is_none")]
    pub response_processors: Option<Vec<serde_json::Value>>,
    #[serde(rename = "request_processors", default, skip_serializing_if = "Option::is_none")]
    pub request_processors: Option<Vec<nodes::stats::ShardSearchPipelinePerPipelineProcessorStats>>,
    #[serde(rename = "request", default, skip_serializing_if = "Option::is_none")]
    pub request: Option<nodes::stats::ShardSearchPipelineOperationStats>,
    #[serde(rename = "response", default, skip_serializing_if = "Option::is_none")]
    pub response: Option<nodes::stats::ShardSearchPipelineOperationStats>,
}

impl ShardSearchPipelinePerPipelineStats {
    
    pub fn new() -> ShardSearchPipelinePerPipelineStats {
        ShardSearchPipelinePerPipelineStats {
            response_processors: None,
            request_processors: None,
            request: None,
            response: None,
        }
    }
}
