/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::transforms;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransformMetadata {
    #[serde(rename = "stats", default, skip_serializing_if = "Option::is_none")]
    pub stats: Option<transforms::ExplainStats>,
    #[serde(rename = "last_updated_at", default, skip_serializing_if = "Option::is_none")]
    pub last_updated_at: Option<f64>,
    #[serde(rename = "status", default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "transform_id", default, skip_serializing_if = "Option::is_none")]
    pub transform_id: Option<String>,
    #[serde(rename = "failure_reason", default, skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,
    #[serde(rename = "continuous_stats", default, skip_serializing_if = "Option::is_none")]
    pub continuous_stats: Option<transforms::ContinuousStats>,
}

impl TransformMetadata {
    
    pub fn new() -> TransformMetadata {
        TransformMetadata {
            stats: None,
            last_updated_at: None,
            status: None,
            transform_id: None,
            failure_reason: None,
            continuous_stats: None,
        }
    }
}
