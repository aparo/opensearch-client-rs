/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DirectGenerator {
    #[serde(rename = "max_edits", default, skip_serializing_if = "Option::is_none")]
    pub max_edits: Option<u32>,
    #[serde(rename = "prefix_length", default, skip_serializing_if = "Option::is_none")]
    pub prefix_length: Option<u32>,
    #[serde(rename = "field")]
    pub field: String,
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<u32>,
    #[serde(rename = "max_term_freq", default, skip_serializing_if = "Option::is_none")]
    pub max_term_freq: Option<f64>,
    #[serde(rename = "max_inspections", default, skip_serializing_if = "Option::is_none")]
    pub max_inspections: Option<f64>,
    #[serde(rename = "min_doc_freq", default, skip_serializing_if = "Option::is_none")]
    pub min_doc_freq: Option<f64>,
    #[serde(rename = "min_word_length", default, skip_serializing_if = "Option::is_none")]
    pub min_word_length: Option<u32>,
    #[serde(rename = "suggest_mode", default, skip_serializing_if = "Option::is_none")]
    pub suggest_mode: Option<String>,
    #[serde(rename = "pre_filter", default, skip_serializing_if = "Option::is_none")]
    pub pre_filter: Option<String>,
    #[serde(rename = "post_filter", default, skip_serializing_if = "Option::is_none")]
    pub post_filter: Option<String>,
}

impl DirectGenerator {
    
    pub fn new(field: String) -> DirectGenerator {
        DirectGenerator {
            max_edits: None,
            prefix_length: None,
            field,
            size: None,
            max_term_freq: None,
            max_inspections: None,
            min_doc_freq: None,
            min_word_length: None,
            suggest_mode: None,
            pre_filter: None,
            post_filter: None,
        }
    }
}
