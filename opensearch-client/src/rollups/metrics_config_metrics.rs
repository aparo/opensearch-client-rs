/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MetricsConfigMetrics {
    #[serde(rename = "sum", default, skip_serializing_if = "Option::is_none")]
    pub sum: Option<serde_json::Value>,
    #[serde(rename = "avg", default, skip_serializing_if = "Option::is_none")]
    pub avg: Option<serde_json::Value>,
    #[serde(rename = "min", default, skip_serializing_if = "Option::is_none")]
    pub min: Option<serde_json::Value>,
    #[serde(rename = "max", default, skip_serializing_if = "Option::is_none")]
    pub max: Option<serde_json::Value>,
    #[serde(rename = "value_count", default, skip_serializing_if = "Option::is_none")]
    pub value_count: Option<serde_json::Value>,
}

impl MetricsConfigMetrics {
    
    pub fn new() -> MetricsConfigMetrics {
        MetricsConfigMetrics {
            sum: None,
            avg: None,
            min: None,
            max: None,
            value_count: None,
        }
    }
}
