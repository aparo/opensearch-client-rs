/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PropertyBase {
    #[serde(
        rename = "ignore_above",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ignore_above: Option<u32>,
    /// Metadata about the field.
    #[serde(rename = "meta", default, skip_serializing_if = "Option::is_none")]
    pub meta: Option<serde_json::Value>,
    #[serde(
        rename = "properties",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub properties: Option<serde_json::Value>,
    #[serde(rename = "dynamic", default, skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<String>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
}

impl PropertyBase {
    pub fn new() -> PropertyBase {
        PropertyBase {
            ignore_above: None,
            meta: None,
            properties: None,
            dynamic: None,
            fields: None,
        }
    }
}
