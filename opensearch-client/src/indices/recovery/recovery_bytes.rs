/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecoveryBytes {
    #[serde(rename = "total", default, skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    #[serde(rename = "reused", default, skip_serializing_if = "Option::is_none")]
    pub reused: Option<String>,
    #[serde(rename = "recovered_from_snapshot", default, skip_serializing_if = "Option::is_none")]
    pub recovered_from_snapshot: Option<String>,
    #[serde(rename = "recovered_from_snapshot_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub recovered_from_snapshot_in_bytes: Option<u32>,
    #[serde(rename = "reused_in_bytes")]
    pub reused_in_bytes: u32,
    #[serde(rename = "total_in_bytes")]
    pub total_in_bytes: u32,
    #[serde(rename = "recovered_in_bytes")]
    pub recovered_in_bytes: u32,
    #[serde(rename = "percent")]
    pub percent: String,
    #[serde(rename = "recovered", default, skip_serializing_if = "Option::is_none")]
    pub recovered: Option<String>,
}

impl RecoveryBytes {
    
    pub fn new(reused_in_bytes: u32, total_in_bytes: u32, recovered_in_bytes: u32, percent: String) -> RecoveryBytes {
        RecoveryBytes {
            total: None,
            reused: None,
            recovered_from_snapshot: None,
            recovered_from_snapshot_in_bytes: None,
            reused_in_bytes,
            total_in_bytes,
            recovered_in_bytes,
            percent,
            recovered: None,
        }
    }
}
