/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeInfoSettingsIngest {
    #[serde(rename = "user_agent", default, skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "foreach", default, skip_serializing_if = "Option::is_none")]
    pub foreach: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "csv", default, skip_serializing_if = "Option::is_none")]
    pub csv: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "split", default, skip_serializing_if = "Option::is_none")]
    pub split: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "json", default, skip_serializing_if = "Option::is_none")]
    pub json: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "urldecode", default, skip_serializing_if = "Option::is_none")]
    pub urldecode: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "dissect", default, skip_serializing_if = "Option::is_none")]
    pub dissect: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "set_security_user", default, skip_serializing_if = "Option::is_none")]
    pub set_security_user: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "inference", default, skip_serializing_if = "Option::is_none")]
    pub inference: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "date", default, skip_serializing_if = "Option::is_none")]
    pub date: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "trim", default, skip_serializing_if = "Option::is_none")]
    pub trim: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "script", default, skip_serializing_if = "Option::is_none")]
    pub script: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "enrich", default, skip_serializing_if = "Option::is_none")]
    pub enrich: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "date_index_name", default, skip_serializing_if = "Option::is_none")]
    pub date_index_name: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "dot_expander", default, skip_serializing_if = "Option::is_none")]
    pub dot_expander: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "convert", default, skip_serializing_if = "Option::is_none")]
    pub convert: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "rename", default, skip_serializing_if = "Option::is_none")]
    pub rename: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "drop", default, skip_serializing_if = "Option::is_none")]
    pub drop: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "lowercase", default, skip_serializing_if = "Option::is_none")]
    pub lowercase: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "set", default, skip_serializing_if = "Option::is_none")]
    pub set: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "join", default, skip_serializing_if = "Option::is_none")]
    pub join: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "remove", default, skip_serializing_if = "Option::is_none")]
    pub remove: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "append", default, skip_serializing_if = "Option::is_none")]
    pub append: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "gsub", default, skip_serializing_if = "Option::is_none")]
    pub gsub: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "sort", default, skip_serializing_if = "Option::is_none")]
    pub sort: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "uppercase", default, skip_serializing_if = "Option::is_none")]
    pub uppercase: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "bytes", default, skip_serializing_if = "Option::is_none")]
    pub bytes: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "fail", default, skip_serializing_if = "Option::is_none")]
    pub fail: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "circle", default, skip_serializing_if = "Option::is_none")]
    pub circle: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "attachment", default, skip_serializing_if = "Option::is_none")]
    pub attachment: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "grok", default, skip_serializing_if = "Option::is_none")]
    pub grok: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "geoip", default, skip_serializing_if = "Option::is_none")]
    pub geoip: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "kv", default, skip_serializing_if = "Option::is_none")]
    pub kv: Option<nodes::info::NodeInfoIngestInfo>,
    #[serde(rename = "pipeline", default, skip_serializing_if = "Option::is_none")]
    pub pipeline: Option<nodes::info::NodeInfoIngestInfo>,
}

impl NodeInfoSettingsIngest {
    
    pub fn new() -> NodeInfoSettingsIngest {
        NodeInfoSettingsIngest {
            user_agent: None,
            foreach: None,
            csv: None,
            split: None,
            json: None,
            urldecode: None,
            dissect: None,
            set_security_user: None,
            inference: None,
            date: None,
            trim: None,
            script: None,
            enrich: None,
            date_index_name: None,
            dot_expander: None,
            convert: None,
            rename: None,
            drop: None,
            lowercase: None,
            set: None,
            join: None,
            remove: None,
            append: None,
            gsub: None,
            sort: None,
            uppercase: None,
            bytes: None,
            fail: None,
            circle: None,
            attachment: None,
            grok: None,
            geoip: None,
            kv: None,
            pipeline: None,
        }
    }
}
