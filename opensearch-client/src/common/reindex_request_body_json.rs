/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};

/// ReindexRequestBodyJson
/// The search definition using the Query DSL and the prototype for the index request.


#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReindexRequestBodyJson {
    #[serde(rename = "dest")]
    pub dest: core::reindex::Destination,  /// The maximum number of documents to reindex.
    #[serde(rename = "max_docs", default, skip_serializing_if = "Option::is_none")]
    pub max_docs: Option<u32>,
    #[serde(rename = "source")]
    pub source: core::reindex::Source,
    #[serde(rename = "script", default, skip_serializing_if = "Option::is_none")]
    pub script: Option<common::Script>,
    #[serde(rename = "conflicts", default, skip_serializing_if = "Option::is_none")]
    pub conflicts: Option<String>,
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<u32>,
}

impl ReindexRequestBodyJson {
      /// The search definition using the Query DSL and the prototype for the index request.
    pub fn new(dest: core::reindex::Destination, source: core::reindex::Source) -> ReindexRequestBodyJson {
        ReindexRequestBodyJson {
            dest,
            max_docs: None,
            source,
            script: None,
            conflicts: None,
            size: None,
        }
    }
}
