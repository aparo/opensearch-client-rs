/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;

use crate::indices::*;
use crate::*;
use reqwest;
use serde::{de::Error as OtherError, Deserialize, Serialize};
use std::{collections::HashMap, sync::Arc};

pub struct IndicesApiClient {
    configuration: Arc<crate::Configuration>,
}

#[bon]
impl IndicesApiClient {
    pub fn new(configuration: Arc<crate::Configuration>) -> Self {
        Self { configuration }
    }

    /// Returns a list of indices in the OpenSearch cluster.
    ///
    /// # Example
    ///
    /// ```
    /// # use opensearch_client::OpenSearchClient;
    /// # pub async fn dox() -> Result<(), Box<dyn std::error::Error>> {
    /// # let client = OpenSearchClient::new("http://localhost:9200")?;
    /// let indices = client.indices().list_indices().await?;
    /// # Ok(())
    /// # }
    /// ```
    pub async fn list_indices(&self) -> Result<Vec<String>, Error> {
        let response = self.get_alias().call().await?;
        let alias_result = response;
        let mut indices = alias_result.keys().cloned().collect::<Vec<String>>();
        indices.sort();
        Ok(indices)
    }

    ///
    /// Returns a component template.
    #[builder(on(String, into))]
    pub async fn get_component_templates(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<HashMap<String, serde_json::Value>, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str =
            format!("{}_component_template", local_var_configuration.base_path,);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }

    ///
    /// Returns an index template.
    #[builder(on(String, into))]
    pub async fn get_index_templates(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<HashMap<String, crate::indices::GetIndexTemplateResponse>, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_index_template", local_var_configuration.base_path,);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns an index template.
    #[builder(on(String, into))]
    pub async fn get_index_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::GetIndexTemplateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Provides statistics on operations happening in an index.
    #[builder(on(String, into))]
    pub async fn stats(
        &self,
        /// No description available
        completion_fields: Option<common::CompletionFields>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        fielddata_fields: Option<common::FielddataFields>,
        /// No description available
        fields: Option<common::Fields>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        forbid_closed_indices: Option<bool>,
        /// No description available
        groups: Option<common::Groups>,
        /// No description available
        human: Option<bool>,
        /// No description available
        include_segment_file_sizes: Option<bool>,
        /// No description available
        include_unloaded_segments: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        metric: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the level of detail of the returned information.
        level: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::StatsResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_stats/{metric}",
            local_var_configuration.base_path,
            index = index,
            metric = metric
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fielddata_fields {
            local_var_req_builder =
                local_var_req_builder.query(&[("fielddata_fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = include_unloaded_segments {
            local_var_req_builder = local_var_req_builder
                .query(&[("include_unloaded_segments", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = forbid_closed_indices {
            local_var_req_builder = local_var_req_builder
                .query(&[("forbid_closed_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = groups {
            local_var_req_builder =
                local_var_req_builder.query(&[("groups", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fields {
            local_var_req_builder =
                local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = include_segment_file_sizes {
            local_var_req_builder = local_var_req_builder
                .query(&[("include_segment_file_sizes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = level {
            local_var_req_builder =
                local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = completion_fields {
            local_var_req_builder =
                local_var_req_builder.query(&[("completion_fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Performs the flush operation on one or more indexes.
    #[builder(on(String, into))]
    pub async fn flush(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        force: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        wait_if_ongoing: Option<bool>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::common::ShardsOperationResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_flush",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = force {
            local_var_req_builder =
                local_var_req_builder.query(&[("force", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_if_ongoing {
            local_var_req_builder =
                local_var_req_builder.query(&[("wait_if_ongoing", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Simulate matching the given index name against the index templates in the system.
    #[builder(on(String, into))]
    pub async fn simulate_index_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// New index template definition, which will be included in the simulation, as if it already exists in the system
        simulate_index_template: indices::SimulateIndexTemplate,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::SimulateIndexTemplateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/_simulate_index/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&simulate_index_template);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Opens an index.
    #[builder(on(String, into))]
    pub async fn open(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        task_execution_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
    ) -> Result<crate::indices::OpenResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_open",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = task_execution_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("task_execution_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about whether a particular index exists.
    #[builder(on(String, into))]
    pub async fn exists(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        include_defaults: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<bool, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = include_defaults {
            local_var_req_builder =
                local_var_req_builder.query(&[("include_defaults", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            if local_var_status.is_success() {
                // If the response is successful, we return true
                Ok(true)
            } else if local_var_status == reqwest::StatusCode::NOT_FOUND {
                // If the index does not exist, we return false
                Ok(false)
            } else {
                // For other statuses, we return an error
                let local_var_error = ResponseContent {
                    status: local_var_status,
                    content: local_var_content,
                };
                Err(Error::ApiError(local_var_error))
            }
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Clones an index.
    #[builder(on(String, into))]
    pub async fn clone(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        task_execution_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        target: String,
        /// The configuration for the target index (`settings` and `aliases`)
        clone: indices::Clone,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_clone/{target}",
            local_var_configuration.base_path,
            index = index,
            target = target
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = task_execution_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("task_execution_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&clone);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes an index template.
    #[builder(on(String, into))]
    pub async fn delete_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes an alias.
    #[builder(on(String, into))]
    pub async fn delete_alias(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_aliases/{name}",
            local_var_configuration.base_path,
            index = index,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns an alias.
    #[builder(on(String, into))]
    pub async fn get_alias(
        &self,
        /// No description available
        index: Option<String>,
        /// No description available
        name: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<HashMap<String, AliasDefinition>, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = if let Some(index) = &index {
            format!(
                "{}{index}/_alias/{name}",
                local_var_configuration.base_path,
                name = name.unwrap_or_default(),
                index = index
            )
        } else {
            format!("{}_alias", local_var_configuration.base_path)
        };
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about one or more indexes.
    #[builder(on(String, into))]
    pub async fn get(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        include_defaults: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::GetResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = include_defaults {
            local_var_req_builder =
                local_var_req_builder.query(&[("include_defaults", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Adds a block to an index.
    #[builder(on(String, into))]
    pub async fn add_block(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        block: String,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_block/{block}",
            local_var_configuration.base_path,
            block = block,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns mappings for one or more indexes.
    #[builder(on(String, into))]
    pub async fn get_mapping(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::GetMappingResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_mapping",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        // if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &index.to_string())]);
        // }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns data streams.
    #[builder(on(String, into))]
    pub async fn get_data_stream(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::GetDataStreamResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_data_stream/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Performs the force merge operation on one or more indexes.
    #[builder(on(String, into))]
    pub async fn forcemerge(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flush: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        max_num_segments: Option<i32>,
        /// No description available
        only_expunge_deletes: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_forcemerge",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = only_expunge_deletes {
            local_var_req_builder = local_var_req_builder
                .query(&[("only_expunge_deletes", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flush {
            local_var_req_builder =
                local_var_req_builder.query(&[("flush", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = max_num_segments {
            local_var_req_builder =
                local_var_req_builder.query(&[("max_num_segments", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// The `_upgrade` API is no longer useful and will be removed.
    #[builder(on(String, into))]
    pub async fn get_upgrade(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// Whether specified concrete indexes should be ignored when unavailable (missing or closed).
        ignore_unavailable: Option<bool>,
        /// Whether to ignore if a wildcard indexes expression resolves into no concrete indexes. (This includes `_all` string or when no indexes have been specified).
        allow_no_indices: Option<bool>,
    ) -> Result<crate::indices::IndexGetUpgradeStatus, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_upgrade",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates an index template.
    #[builder(on(String, into))]
    pub async fn put_index_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        create: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The template definition
        put_index_template: indices::PutIndexTemplate,
        /// User defined reason for creating/updating the index template.
        cause: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = create {
            local_var_req_builder =
                local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cause {
            local_var_req_builder =
                local_var_req_builder.query(&[("cause", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&put_index_template);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes a data stream.
    #[builder(on(String, into))]
    pub async fn delete_data_stream(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_data_stream/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Updates the index settings.
    #[builder(on(String, into))]
    pub async fn put_settings(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        preserve_existing: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// The index settings to be updated.
        put_settings: indices::PutSettings,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_settings",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = preserve_existing {
            local_var_req_builder =
                local_var_req_builder.query(&[("preserve_existing", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&put_settings);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Provides low-level information about segments in a Lucene index.
    #[builder(on(String, into))]
    pub async fn segments(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        verbose: Option<bool>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::SegmentsResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_segments",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = verbose {
            local_var_req_builder =
                local_var_req_builder.query(&[("verbose", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Performs the analysis process on a text and return the tokens breakdown of the text.
    #[builder(on(String, into))]
    pub async fn analyze(
        &self,
        /// Define analyzer/tokenizer parameters and the text on which the analysis should be performed
        analyze: indices::Analyze,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The name of the index to scope the operation.
        index: Option<String>,
    ) -> Result<crate::indices::AnalyzeResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_analyze",
            local_var_configuration.base_path,
            index = index.unwrap_or_default().clone()
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        // if let Some(ref local_var_str) = index {
        //     local_var_req_builder =
        //         local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
        // }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&analyze);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Simulate resolving the given template name or body.
    #[builder(on(String, into))]
    pub async fn simulate_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// New index template definition to be simulated, if no index template name is specified.
        simulate_template: indices::SimulateTemplate,
        /// No description available
        create: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// User defined reason for dry-run creating the new template for simulation purposes.
        cause: Option<String>,
    ) -> Result<crate::indices::SimulateTemplateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/_simulate/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cause {
            local_var_req_builder =
                local_var_req_builder.query(&[("cause", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = create {
            local_var_req_builder =
                local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&simulate_template);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Updates index aliases.
    #[builder(on(String, into))]
    pub async fn update_aliases(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The definition of `actions` to perform
        update_aliases: indices::UpdateAliases,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_aliases", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&update_aliases);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Allow to shrink an existing index into a new index with fewer primary shards.
    #[builder(on(String, into))]
    pub async fn shrink(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        task_execution_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        target: String,
        /// The configuration for the target index (`settings` and `aliases`)
        shrink: indices::Shrink,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
        /// whether or not to copy settings from the source index.
        copy_settings: Option<bool>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_shrink/{target}",
            local_var_configuration.base_path,
            target = target,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = task_execution_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("task_execution_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = copy_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("copy_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&shrink);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Updates an alias to point to a new index when the existing index
    /// is considered to be too large or too old.
    #[builder(on(String, into))]
    pub async fn rollover(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        alias: String,
        /// No description available
        dry_run: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        new_index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The conditions that needs to be met for executing rollover
        rollover: indices::Rollover,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{alias}/_rollover/{new_index}",
            local_var_configuration.base_path,
            new_index = new_index,
            alias = alias
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = dry_run {
            local_var_req_builder =
                local_var_req_builder.query(&[("dry_run", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&rollover);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Closes an index.
    #[builder(on(String, into))]
    pub async fn close(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_close",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Clears all or specific caches for one or more indexes.
    #[builder(on(String, into))]
    pub async fn clear_cache(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        fielddata: Option<bool>,
        /// No description available
        fields: Option<common::Fields>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: Option<Vec<String>>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        query: Option<bool>,
        /// No description available
        request: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::common::ShardsOperationResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_cache/clear",
            local_var_configuration.base_path,
            index = index.clone().unwrap_or_default().join(",")
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fielddata {
            local_var_req_builder =
                local_var_req_builder.query(&[("fielddata", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fields {
            local_var_req_builder =
                local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = index {
            local_var_req_builder = match "multi" {
                "multi" => local_var_req_builder.query(
                    &local_var_str
                        .into_iter()
                        .map(|p| ("index".to_owned(), p.to_string()))
                        .collect::<Vec<(std::string::String, std::string::String)>>(),
                ),
                _ => local_var_req_builder.query(&[(
                    "index",
                    &local_var_str
                        .into_iter()
                        .map(|p| p.to_string())
                        .collect::<Vec<String>>()
                        .join(",")
                        .to_string(),
                )]),
            };
        }
        if let Some(ref local_var_str) = query {
            local_var_req_builder =
                local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = request {
            local_var_req_builder =
                local_var_req_builder.query(&[("request", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Allows a user to validate a potentially expensive query without executing it.
    #[builder(on(String, into))]
    pub async fn validate_query(
        &self,
        /// No description available
        all_shards: Option<bool>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        analyze_wildcard: Option<bool>,
        /// No description available
        analyzer: Option<String>,
        /// No description available
        default_operator: Option<String>,
        /// No description available
        df: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        explain: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        lenient: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        q: Option<String>,
        /// No description available
        rewrite: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// The query definition specified with the Query DSL
        validate_query: indices::ValidateQuery,
    ) -> Result<crate::indices::ValidateQueryResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_validate/query",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = analyzer {
            local_var_req_builder =
                local_var_req_builder.query(&[("analyzer", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = rewrite {
            local_var_req_builder =
                local_var_req_builder.query(&[("rewrite", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = all_shards {
            local_var_req_builder =
                local_var_req_builder.query(&[("all_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = analyze_wildcard {
            local_var_req_builder =
                local_var_req_builder.query(&[("analyze_wildcard", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = default_operator {
            local_var_req_builder =
                local_var_req_builder.query(&[("default_operator", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = q {
            local_var_req_builder =
                local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = df {
            local_var_req_builder =
                local_var_req_builder.query(&[("df", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = explain {
            local_var_req_builder =
                local_var_req_builder.query(&[("explain", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = lenient {
            local_var_req_builder =
                local_var_req_builder.query(&[("lenient", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&validate_query);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Performs the refresh operation in one or more indexes.
    #[builder(on(String, into))]
    pub async fn refresh(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: Option<String>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::common::ShardsOperationResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = if let Some(index) = index {
            format!(
                "{}{index}/_refresh",
                local_var_configuration.base_path,
                index = index
            )
        } else {
            format!("{}_refresh", local_var_configuration.base_path)
        };
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes an index.
    #[builder(on(String, into))]
    pub async fn delete(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<DocumentDeleteResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about ongoing index shard recoveries.
    #[builder(on(String, into))]
    pub async fn recovery(
        &self,
        /// No description available
        active_only: Option<bool>,
        /// No description available
        detailed: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::RecoveryResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_recovery",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = detailed {
            local_var_req_builder =
                local_var_req_builder.query(&[("detailed", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = active_only {
            local_var_req_builder =
                local_var_req_builder.query(&[("active_only", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Provides statistics on operations happening in a data stream.
    #[builder(on(String, into))]
    pub async fn data_streams_stats(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::DataStreamsStatsResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_data_stream/{name}/_stats",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about whether a particular alias exists.
    #[builder(on(String, into))]
    pub async fn exists_alias(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<bool, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_alias/{name}",
            local_var_configuration.base_path,
            index = index,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            if local_var_status == reqwest::StatusCode::OK {
                Ok(true)
            } else if local_var_status == reqwest::StatusCode::NOT_FOUND {
                Ok(false)
            } else {
                // Unexpected status code, treat as an error
                Err(Error::UnexpectedStatusCode(local_var_status))
            }
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns an index template.
    #[builder(on(String, into))]
    pub async fn get_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::indices::GetTemplateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates a data stream.
    #[builder(on(String, into))]
    pub async fn create_data_stream(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The data stream definition
        create_data_stream: indices::CreateDataStream,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_data_stream/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&create_data_stream);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about any matching indexes, aliases, and data streams.
    #[builder(on(String, into))]
    pub async fn resolve_index(
        &self,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::ResolveIndexResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_resolve/index/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// The `_upgrade` API is no longer useful and will be removed.
    #[builder(on(String, into))]
    pub async fn upgrade(
        &self,
        /// If `true`, only ancient (an older Lucene major release) segments will be upgraded.
        only_ancient_segments: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// Whether specified concrete indexes should be ignored when unavailable (missing or closed).
        ignore_unavailable: Option<bool>,
        /// Whether to ignore if a wildcard indexes expression resolves into no concrete indexes. (This includes `_all` string or when no indexes have been specified).
        allow_no_indices: Option<bool>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_upgrade",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = only_ancient_segments {
            local_var_req_builder = local_var_req_builder
                .query(&[("only_ancient_segments", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns settings for one or more indexes.
    #[builder(on(String, into))]
    pub async fn get_settings(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        include_defaults: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::GetSettingsResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_settings/{name}",
            local_var_configuration.base_path,
            index = index,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = include_defaults {
            local_var_req_builder =
                local_var_req_builder.query(&[("include_defaults", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates an index template.
    #[builder(on(String, into))]
    pub async fn put_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        create: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        order: Option<i32>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The template definition
        body: indices::PutTemplate,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = create {
            local_var_req_builder =
                local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates an index template.
    #[builder(on(String, into))]
    pub async fn put_template_raw(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        create: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        order: Option<i32>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The template definition
        body: serde_json::Value,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = create {
            local_var_req_builder =
                local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }

    ///
    /// Creates or updates an index template.
    #[builder(on(String, into))]
    pub async fn put_component_template_raw(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        create: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        order: Option<i32>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The template definition
        body: serde_json::Value,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_component_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = create {
            local_var_req_builder =
                local_var_req_builder.query(&[("create", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Deletes an index template.
    #[builder(on(String, into))]
    pub async fn delete_index_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Updates the index mappings.
    #[builder(on(String, into))]
    pub async fn put_mapping(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        write_index_only: Option<bool>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
        /// The mapping definition
        put_mapping: indices::PutMapping,
    ) -> Result<crate::common::IndicesResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_mapping",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = write_index_only {
            local_var_req_builder =
                local_var_req_builder.query(&[("write_index_only", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&put_mapping);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about whether a particular index template exists.
    #[builder(on(String, into))]
    pub async fn exists_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        flat_settings: Option<bool>,
        /// No description available
        human: Option<bool>,
        /// No description available
        local: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
    ) -> Result<serde_json::Value, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Provides store information for shard copies of indexes.
    #[builder(on(String, into))]
    pub async fn shard_stores(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        status: Option<common::Status>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::ShardStoresResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_shard_stores",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = status {
            local_var_req_builder =
                local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates or updates an alias.
    #[builder(on(String, into))]
    pub async fn put_alias(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The settings for the alias, such as `routing` or `filter`
        put_alias: indices::PutAlias,
    ) -> Result<crate::common::AcknowledgedResponseBase, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_aliases",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&put_alias);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Allows you to split an existing index into a new index with more primary shards.
    #[builder(on(String, into))]
    pub async fn split(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        task_execution_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// No description available
        target: String,
        /// The configuration for the target index (`settings` and `aliases`)
        split: indices::Split,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
        /// whether or not to copy settings from the source index.
        copy_settings: Option<bool>,
    ) -> Result<String, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_split/{target}",
            local_var_configuration.base_path,
            target = target,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = task_execution_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("task_execution_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = copy_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("copy_settings", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&split);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Creates an index with optional settings and mappings.
    #[builder(on(String, into))]
    pub async fn create(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// The configuration for the index (`settings` and `mappings`)
        body: indices::IndexTemplateMapping,
        /// Waits until the specified number of shards is active before returning a response. Use `all` for all shards.
        wait_for_active_shards: Option<common::wait_for_active_shards::WaitForActiveShards>,
    ) -> Result<crate::indices::CreateResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}",
            local_var_configuration.base_path,
            index = index
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = wait_for_active_shards {
            local_var_req_builder = local_var_req_builder
                .query(&[("wait_for_active_shards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }

        local_var_req_builder = local_var_req_builder.json(&body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns information about whether a particular index template exists.
    #[builder(on(String, into))]
    pub async fn exists_index_template(
        &self,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        cluster_manager_timeout: Option<String>,
        /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
        /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
        master_timeout: Option<String>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        name: String,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Return local information, do not retrieve the state from cluster-manager node.
        local: Option<bool>,
        /// Return settings in flat format.
        flat_settings: Option<bool>,
    ) -> Result<serde_json::Value, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}_index_template/{name}",
            local_var_configuration.base_path,
            name = name
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = cluster_manager_timeout {
            local_var_req_builder = local_var_req_builder
                .query(&[("cluster_manager_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = flat_settings {
            local_var_req_builder =
                local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = master_timeout {
            local_var_req_builder =
                local_var_req_builder.query(&[("master_timeout", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
    ///
    /// Returns mapping for one or more fields.
    #[builder(on(String, into))]
    pub async fn get_field_mapping(
        &self,
        /// No description available
        allow_no_indices: Option<bool>,
        /// No description available
        error_trace: Option<bool>,
        /// No description available
        fields: String,
        /// No description available
        filter_path: Option<common::FilterPath>,
        /// No description available
        human: Option<bool>,
        /// No description available
        ignore_unavailable: Option<bool>,
        /// No description available
        include_defaults: Option<bool>,
        /// No description available
        index: String,
        /// No description available
        local: Option<bool>,
        /// No description available
        pretty: Option<bool>,
        /// No description available
        source: Option<String>,
        /// Specifies the type of index that wildcard expressions can match. Supports comma-separated values.
        expand_wildcards: Option<common::ExpandWildcards>,
    ) -> Result<crate::indices::GetFieldMappingResponse, Error> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}{index}/_mapping/field/{fields}",
            local_var_configuration.base_path,
            index = index,
            fields = fields
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = include_defaults {
            local_var_req_builder =
                local_var_req_builder.query(&[("include_defaults", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = error_trace {
            local_var_req_builder =
                local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = local {
            local_var_req_builder =
                local_var_req_builder.query(&[("local", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = filter_path {
            local_var_req_builder =
                local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = ignore_unavailable {
            local_var_req_builder =
                local_var_req_builder.query(&[("ignore_unavailable", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source {
            local_var_req_builder =
                local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = pretty {
            local_var_req_builder =
                local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = human {
            local_var_req_builder =
                local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = expand_wildcards {
            local_var_req_builder =
                local_var_req_builder.query(&[("expand_wildcards", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = allow_no_indices {
            local_var_req_builder =
                local_var_req_builder.query(&[("allow_no_indices", &local_var_str.to_string())]);
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
}

/// Struct for typed errors of method [`exists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExistsError {
    DefaultResponse(serde_json::Value),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`get_alias`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAliasError {
    Status404(serde_json::Value),
    DefaultResponse(crate::indices::GetAliasResponse),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteError {
    DefaultResponse(crate::common::IndicesResponseBase),
    Status404(crate::indices::IndexError),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`exists_alias`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExistsAliasError {
    DefaultResponse(serde_json::Value),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}
