/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::indices;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndexingSlowlog {
    #[serde(rename = "level", default, skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(rename = "reformat", default, skip_serializing_if = "Option::is_none")]
    pub reformat: Option<common::StringifiedBoolean>,
    #[serde(rename = "threshold", default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<indices::IndexingSlowlogThresholds>,
    /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
    /// this behavior while keeping the semantics of the field type.
    ///
    /// Depending on the target language, code generators can keep the union or remove it and leniently parse
    /// strings to the target type.
    #[serde(rename = "source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<common::StringifiedInteger>,
}

impl IndexingSlowlog {
    pub fn new() -> IndexingSlowlog {
        IndexingSlowlog {
            level: None,
            reformat: None,
            threshold: None,
            source: None,
        }
    }
}
