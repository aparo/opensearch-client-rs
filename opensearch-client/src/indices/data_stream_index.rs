/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DataStreamIndex {
    #[serde(
        rename = "ilm_policy",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub ilm_policy: Option<String>,
    #[serde(rename = "index_name")]
    pub index_name: String,
    #[serde(
        rename = "managed_by",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub managed_by: Option<String>,
    #[serde(rename = "index_uuid")]
    pub index_uuid: String,
    /// Indicates if ILM should take precedence over DSL in case both are configured to manage this index.
    #[serde(
        rename = "prefer_ilm",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub prefer_ilm: Option<bool>,
}

impl DataStreamIndex {
    pub fn new(index_name: String, index_uuid: String) -> DataStreamIndex {
        DataStreamIndex {
            ilm_policy: None,
            index_name,
            managed_by: None,
            index_uuid,
            prefer_ilm: None,
        }
    }
}
