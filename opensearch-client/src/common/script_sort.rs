/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScriptSort {
    #[serde(rename = "mode", default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    #[serde(rename = "type", default, skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "nested", default, skip_serializing_if = "Option::is_none")]
    pub nested: Option<common::NestedSortValue>,
    #[serde(rename = "order", default, skip_serializing_if = "Option::is_none")]
    pub order: Option<String>,
    #[serde(rename = "script")]
    pub script: common::Script,
}

impl ScriptSort {
    
    pub fn new(script: common::Script) -> ScriptSort {
        ScriptSort {
            mode: None,
            r#type: None,
            nested: None,
            order: None,
            script,
        }
    }
}
