/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardSearchBackpressureTaskCancellationStats {
    #[serde(rename = "cancelled_task_percentage", default, skip_serializing_if = "Option::is_none")]
    pub cancelled_task_percentage: Option<f64>,
    #[serde(rename = "cancellation_limit_reached_count", default, skip_serializing_if = "Option::is_none")]
    pub cancellation_limit_reached_count: Option<u32>,
    #[serde(rename = "cancellation_count", default, skip_serializing_if = "Option::is_none")]
    pub cancellation_count: Option<u32>,
    #[serde(rename = "current_cancellation_eligible_tasks_count", default, skip_serializing_if = "Option::is_none")]
    pub current_cancellation_eligible_tasks_count: Option<u32>,
}

impl ShardSearchBackpressureTaskCancellationStats {
    
    pub fn new() -> ShardSearchBackpressureTaskCancellationStats {
        ShardSearchBackpressureTaskCancellationStats {
            cancelled_task_percentage: None,
            cancellation_limit_reached_count: None,
            cancellation_count: None,
            current_cancellation_eligible_tasks_count: None,
        }
    }
}
