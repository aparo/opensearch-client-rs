/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Term {
    #[serde(rename = "doc_freq", default, skip_serializing_if = "Option::is_none")]
    pub doc_freq: Option<u32>,
    #[serde(rename = "score", default, skip_serializing_if = "Option::is_none")]
    pub score: Option<f64>,
    #[serde(rename = "ttf", default, skip_serializing_if = "Option::is_none")]
    pub ttf: Option<u32>,
    #[serde(rename = "term_freq")]
    pub term_freq: u32,
    #[serde(rename = "tokens", default, skip_serializing_if = "Option::is_none")]
    pub tokens: Option<Vec<core::termvectors::Token>>,
}

impl Term {
    
    pub fn new(term_freq: u32) -> Term {
        Term {
            doc_freq: None,
            score: None,
            ttf: None,
            term_freq,
            tokens: None,
        }
    }
}
