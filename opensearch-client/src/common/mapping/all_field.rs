/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AllField {
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "analyzer")]
    pub analyzer: String,
    #[serde(rename = "similarity")]
    pub similarity: String,
    #[serde(rename = "store_term_vector_payloads")]
    pub store_term_vector_payloads: bool,
    #[serde(rename = "store_term_vectors")]
    pub store_term_vectors: bool,
    #[serde(rename = "search_analyzer")]
    pub search_analyzer: String,
    #[serde(rename = "omit_norms")]
    pub omit_norms: bool,
    #[serde(rename = "store_term_vector_positions")]
    pub store_term_vector_positions: bool,
    #[serde(rename = "store_term_vector_offsets")]
    pub store_term_vector_offsets: bool,
    #[serde(rename = "store")]
    pub store: bool,
}

impl AllField {
    
    pub fn new(enabled: bool, analyzer: String, similarity: String, store_term_vector_payloads: bool, store_term_vectors: bool, search_analyzer: String, omit_norms: bool, store_term_vector_positions: bool, store_term_vector_offsets: bool, store: bool) -> AllField {
        AllField {
            enabled,
            analyzer,
            similarity,
            store_term_vector_payloads,
            store_term_vectors,
            search_analyzer,
            omit_norms,
            store_term_vector_positions,
            store_term_vector_offsets,
            store,
        }
    }
}
