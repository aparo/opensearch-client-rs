/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RescoreQuery {  /// The relative importance of the original query as compared to the rescore query.
    #[serde(rename = "query_weight", default, skip_serializing_if = "Option::is_none")]
    pub query_weight: Option<f64>,
    #[serde(rename = "score_mode", default, skip_serializing_if = "Option::is_none")]
    pub score_mode: Option<String>,
    #[serde(rename = "rescore_query")]
    pub rescore_query: crate::dsl::Query,  /// The relative importance of the rescore query as compared to the original query.
    #[serde(rename = "rescore_query_weight", default, skip_serializing_if = "Option::is_none")]
    pub rescore_query_weight: Option<f64>,
}

impl RescoreQuery {
    
    pub fn new(rescore_query: crate::dsl::Query) -> RescoreQuery {
        RescoreQuery {
            query_weight: None,
            score_mode: None,
            rescore_query,
            rescore_query_weight: None,
        }
    }
}
