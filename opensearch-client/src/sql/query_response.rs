/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct QueryResponse {
    #[serde(rename = "cursor", default, skip_serializing_if = "Option::is_none")]
    pub cursor: Option<String>,
    #[serde(rename = "status", default, skip_serializing_if = "Option::is_none")]
    pub status: Option<u32>,
    #[serde(rename = "total", default, skip_serializing_if = "Option::is_none")]
    pub total: Option<u32>,
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<u32>,
    #[serde(rename = "schema", default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<Vec<serde_json::Value>>,
}

impl QueryResponse {
    
    pub fn new() -> QueryResponse {
        QueryResponse {
            cursor: None,
            status: None,
            total: None,
            size: None,
            schema: None,
        }
    }
}
