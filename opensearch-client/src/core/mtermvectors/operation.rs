/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Operation {
    #[serde(rename = "_id")]
    pub id: String,  /// When `true`, the response includes the document count, the sum of the document frequencies, and the sum of the term frequencies.
    #[serde(rename = "field_statistics", default, skip_serializing_if = "Option::is_none")]
    pub field_statistics: Option<bool>,  /// When `true`, the response includes the term offsets.
    #[serde(rename = "offsets", default, skip_serializing_if = "Option::is_none")]
    pub offsets: Option<bool>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<common::Fields>,  /// When `true`, the response includes the term payloads.
    #[serde(rename = "payloads", default, skip_serializing_if = "Option::is_none")]
    pub payloads: Option<bool>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,  /// When `true`, the response includes the term frequency and the document frequency.
    #[serde(rename = "term_statistics", default, skip_serializing_if = "Option::is_none")]
    pub term_statistics: Option<bool>,
    #[serde(rename = "version_type", default, skip_serializing_if = "Option::is_none")]
    pub version_type: Option<String>,
    #[serde(rename = "_index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<String>,
    #[serde(rename = "filter", default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<core::termvectors::Filter>,  /// When `true`, the response includes the term positions.
    #[serde(rename = "positions", default, skip_serializing_if = "Option::is_none")]
    pub positions: Option<bool>,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
}

impl Operation {
    
    pub fn new(id: String) -> Operation {
        Operation {
            id,
            field_statistics: None,
            offsets: None,
            fields: None,
            payloads: None,
            routing: None,
            term_statistics: None,
            version_type: None,
            index: None,
            filter: None,
            positions: None,
            version: None,
        }
    }
}
