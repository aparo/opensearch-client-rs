/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CgroupMemoryStats {  /// The maximum amount of user memory (including file cache) allowed for all tasks in the same cgroup as the OpenSearch process.
  /// This value can be too big to store in a `long`, so is returned as a string so that the value returned can exactly match what the underlying operating system interface returns.
  /// Any value that is too large to parse into a `long` almost certainly means no limit has been set for the cgroup.
    #[serde(rename = "limit_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub limit_in_bytes: Option<String>,  /// The `memory` control group to which the OpenSearch process belongs.
    #[serde(rename = "control_group", default, skip_serializing_if = "Option::is_none")]
    pub control_group: Option<String>,  /// The total current memory usage by processes in the cgroup, in bytes, by all tasks in the same cgroup as the OpenSearch process.
  /// This value is stored as a string for consistency with `limit_in_bytes`.
    #[serde(rename = "usage_in_bytes", default, skip_serializing_if = "Option::is_none")]
    pub usage_in_bytes: Option<String>,
}

impl CgroupMemoryStats {
    
    pub fn new() -> CgroupMemoryStats {
        CgroupMemoryStats {
            limit_in_bytes: None,
            control_group: None,
            usage_in_bytes: None,
        }
    }
}
