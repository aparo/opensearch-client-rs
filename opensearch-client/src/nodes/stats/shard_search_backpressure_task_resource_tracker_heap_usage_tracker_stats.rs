/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardSearchBackpressureTaskResourceTrackerHeapUsageTrackerStats {
    #[serde(rename = "cancellation_count", default, skip_serializing_if = "Option::is_none")]
    pub cancellation_count: Option<u32>,
    #[serde(rename = "current_avg_bytes", default, skip_serializing_if = "Option::is_none")]
    pub current_avg_bytes: Option<u32>,
    #[serde(rename = "current_max", default, skip_serializing_if = "Option::is_none")]
    pub current_max: Option<String>,
    #[serde(rename = "current_avg", default, skip_serializing_if = "Option::is_none")]
    pub current_avg: Option<String>,
    #[serde(rename = "rolling_avg", default, skip_serializing_if = "Option::is_none")]
    pub rolling_avg: Option<String>,
    #[serde(rename = "current_max_bytes", default, skip_serializing_if = "Option::is_none")]
    pub current_max_bytes: Option<u32>,
    #[serde(rename = "rolling_avg_bytes", default, skip_serializing_if = "Option::is_none")]
    pub rolling_avg_bytes: Option<u32>,
}

impl ShardSearchBackpressureTaskResourceTrackerHeapUsageTrackerStats {
    
    pub fn new() -> ShardSearchBackpressureTaskResourceTrackerHeapUsageTrackerStats {
        ShardSearchBackpressureTaskResourceTrackerHeapUsageTrackerStats {
            cancellation_count: None,
            current_avg_bytes: None,
            current_max: None,
            current_avg: None,
            rolling_avg: None,
            current_max_bytes: None,
            rolling_avg_bytes: None,
        }
    }
}
