/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntervalsContainer {
    #[serde(rename = "match", default, skip_serializing_if = "Option::is_none")]
    pub r#match: Option<common::query_dsl::IntervalsMatch>,
    #[serde(rename = "prefix", default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<common::query_dsl::IntervalsPrefix>,
    #[serde(rename = "any_of", default, skip_serializing_if = "Option::is_none")]
    pub any_of: Option<Box<common::query_dsl::IntervalsAnyOf>>,
    #[serde(rename = "fuzzy", default, skip_serializing_if = "Option::is_none")]
    pub fuzzy: Option<common::query_dsl::IntervalsFuzzy>,
    #[serde(rename = "wildcard", default, skip_serializing_if = "Option::is_none")]
    pub wildcard: Option<common::query_dsl::IntervalsWildcard>,
    #[serde(rename = "all_of", default, skip_serializing_if = "Option::is_none")]
    pub all_of: Option<Box<common::query_dsl::IntervalsAllOf>>,
}

impl IntervalsContainer {
    pub fn new() -> IntervalsContainer {
        IntervalsContainer {
            r#match: None,
            prefix: None,
            any_of: None,
            fuzzy: None,
            wildcard: None,
            all_of: None,
        }
    }
}
