/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FileSystem {
    #[serde(rename = "total", default, skip_serializing_if = "Option::is_none")]
    pub total: Option<nodes::stats::FileSystemTotal>,  /// List of all file stores.
    #[serde(rename = "data", default, skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<nodes::stats::DataPathStats>>,
    #[serde(rename = "io_stats", default, skip_serializing_if = "Option::is_none")]
    pub io_stats: Option<nodes::stats::IoStats>,
    #[serde(rename = "timestamp", default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl FileSystem {
    
    pub fn new() -> FileSystem {
        FileSystem {
            total: None,
            data: None,
            io_stats: None,
            timestamp: None,
        }
    }
}
