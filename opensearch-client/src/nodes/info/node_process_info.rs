/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeProcessInfo {  /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    #[serde(rename = "refresh_interval", default, skip_serializing_if = "Option::is_none")]
    pub refresh_interval: Option<String>,  /// Process identifier (PID)
    #[serde(rename = "id")]
    pub id: u32,  /// Indicates if the process address space has been successfully locked in memory
    #[serde(rename = "mlockall")]
    pub mlockall: bool,
    #[serde(rename = "refresh_interval_in_millis")]
    pub refresh_interval_in_millis: String,
}

impl NodeProcessInfo {
    
    pub fn new(id: u32, mlockall: bool, refresh_interval_in_millis: String) -> NodeProcessInfo {
        NodeProcessInfo {
            refresh_interval: None,
            id,
            mlockall,
            refresh_interval_in_millis,
        }
    }
}
