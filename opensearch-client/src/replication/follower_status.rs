/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FollowerStatus {
    #[serde(rename = "operations_read", default, skip_serializing_if = "Option::is_none")]
    pub operations_read: Option<f64>,
    #[serde(rename = "num_paused_indices", default, skip_serializing_if = "Option::is_none")]
    pub num_paused_indices: Option<f64>,
    #[serde(rename = "num_syncing_indices", default, skip_serializing_if = "Option::is_none")]
    pub num_syncing_indices: Option<f64>,
    #[serde(rename = "operations_written", default, skip_serializing_if = "Option::is_none")]
    pub operations_written: Option<f64>,
    #[serde(rename = "leader_checkpoint", default, skip_serializing_if = "Option::is_none")]
    pub leader_checkpoint: Option<f64>,
    #[serde(rename = "num_index_tasks", default, skip_serializing_if = "Option::is_none")]
    pub num_index_tasks: Option<f64>,
    #[serde(rename = "throttled_write_requests", default, skip_serializing_if = "Option::is_none")]
    pub throttled_write_requests: Option<f64>,
    #[serde(rename = "num_failed_indices", default, skip_serializing_if = "Option::is_none")]
    pub num_failed_indices: Option<f64>,
    #[serde(rename = "failed_read_requests", default, skip_serializing_if = "Option::is_none")]
    pub failed_read_requests: Option<f64>,
    #[serde(rename = "num_shard_tasks", default, skip_serializing_if = "Option::is_none")]
    pub num_shard_tasks: Option<f64>,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "total_write_time_millis", default, skip_serializing_if = "Option::is_none")]
    pub total_write_time_millis: Option<common::StringifiedEpochTimeUnitMillis>,
    #[serde(rename = "throttled_read_requests", default, skip_serializing_if = "Option::is_none")]
    pub throttled_read_requests: Option<f64>,
    #[serde(rename = "num_bootstrapping_indices", default, skip_serializing_if = "Option::is_none")]
    pub num_bootstrapping_indices: Option<f64>,
    #[serde(rename = "follower_checkpoint", default, skip_serializing_if = "Option::is_none")]
    pub follower_checkpoint: Option<f64>,
    #[serde(rename = "failed_write_requests", default, skip_serializing_if = "Option::is_none")]
    pub failed_write_requests: Option<f64>,
    #[serde(rename = "index_stats", default, skip_serializing_if = "Option::is_none")]
    pub index_stats: Option<serde_json::Value>,
}

impl FollowerStatus {
    
    pub fn new() -> FollowerStatus {
        FollowerStatus {
            operations_read: None,
            num_paused_indices: None,
            num_syncing_indices: None,
            operations_written: None,
            leader_checkpoint: None,
            num_index_tasks: None,
            throttled_write_requests: None,
            num_failed_indices: None,
            failed_read_requests: None,
            num_shard_tasks: None,
            total_write_time_millis: None,
            throttled_read_requests: None,
            num_bootstrapping_indices: None,
            follower_checkpoint: None,
            failed_write_requests: None,
            index_stats: None,
        }
    }
}
