/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Action {
    #[serde(rename = "request_body", default, skip_serializing_if = "Option::is_none")]
    pub request_body: Option<String>,
    #[serde(rename = "url", default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "method", default, skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    #[serde(rename = "headers", default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<ml::Headers>,
    #[serde(rename = "post_process_function", default, skip_serializing_if = "Option::is_none")]
    pub post_process_function: Option<String>,
    #[serde(rename = "pre_process_function", default, skip_serializing_if = "Option::is_none")]
    pub pre_process_function: Option<String>,
    #[serde(rename = "action_type", default, skip_serializing_if = "Option::is_none")]
    pub action_type: Option<String>,
}

impl Action {
    
    pub fn new() -> Action {
        Action {
            request_body: None,
            url: None,
            method: None,
            headers: None,
            post_process_function: None,
            pre_process_function: None,
            action_type: None,
        }
    }
}
