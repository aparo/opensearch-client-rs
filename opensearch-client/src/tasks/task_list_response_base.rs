/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::tasks;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, Serialize, Deserialize)]
pub struct TaskListResponseBase {
    #[serde(
        rename = "node_failures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub node_failures: Option<Vec<common::ErrorCause>>,
    /// Task information grouped by node, if `group_by` was set to `node` (the default).
    #[serde(rename = "nodes", default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<serde_json::Value>,
    #[serde(
        rename = "task_failures",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub task_failures: Option<Vec<common::TaskFailure>>,
    #[serde(rename = "tasks", default, skip_serializing_if = "Option::is_none")]
    pub tasks: Option<tasks::TaskInfos>,
}

impl TaskListResponseBase {
    pub fn new() -> TaskListResponseBase {
        TaskListResponseBase {
            node_failures: None,
            nodes: None,
            task_failures: None,
            tasks: None,
        }
    }
}
