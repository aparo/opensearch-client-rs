/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetConfigsRequestBodyJson {
    #[serde(rename = "config_id_list", default, skip_serializing_if = "Option::is_none")]
    pub config_id_list: Option<Vec<String>>,
    #[serde(rename = "from_index", default, skip_serializing_if = "Option::is_none")]
    pub from_index: Option<u32>,
    #[serde(rename = "sort_field", default, skip_serializing_if = "Option::is_none")]
    pub sort_field: Option<String>,
    #[serde(rename = "max_items", default, skip_serializing_if = "Option::is_none")]
    pub max_items: Option<u32>,
    #[serde(rename = "sort_order", default, skip_serializing_if = "Option::is_none")]
    pub sort_order: Option<String>,
}

impl GetConfigsRequestBodyJson {
    
    pub fn new() -> GetConfigsRequestBodyJson {
        GetConfigsRequestBodyJson {
            config_id_list: None,
            from_index: None,
            sort_field: None,
            max_items: None,
            sort_order: None,
        }
    }
}
