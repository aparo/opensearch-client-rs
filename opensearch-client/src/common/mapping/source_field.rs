/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SourceField {
    #[serde(rename = "excludes", default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    #[serde(rename = "includes", default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
    #[serde(rename = "compress", default, skip_serializing_if = "Option::is_none")]
    pub compress: Option<bool>,
    #[serde(rename = "enabled", default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "compress_threshold", default, skip_serializing_if = "Option::is_none")]
    pub compress_threshold: Option<String>,
}

impl SourceField {
    
    pub fn new() -> SourceField {
        SourceField {
            excludes: None,
            includes: None,
            compress: None,
            enabled: None,
            compress_threshold: None,
        }
    }
}
