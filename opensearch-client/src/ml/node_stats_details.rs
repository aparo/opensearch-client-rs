/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeStatsDetails {
    #[serde(rename = "algorithms", default, skip_serializing_if = "Option::is_none")]
    pub algorithms: Option<ml::Algorithms>,  /// The JVM heap usage.
    #[serde(rename = "ml_jvm_heap_usage", default, skip_serializing_if = "Option::is_none")]
    pub ml_jvm_heap_usage: Option<u32>,  /// The deployed model count.
    #[serde(rename = "ml_deployed_model_count", default, skip_serializing_if = "Option::is_none")]
    pub ml_deployed_model_count: Option<u32>,  /// The executing task count.
    #[serde(rename = "ml_executing_task_count", default, skip_serializing_if = "Option::is_none")]
    pub ml_executing_task_count: Option<u32>,  /// The failure count.
    #[serde(rename = "ml_failure_count", default, skip_serializing_if = "Option::is_none")]
    pub ml_failure_count: Option<u32>,
    #[serde(rename = "models", default, skip_serializing_if = "Option::is_none")]
    pub models: Option<ml::Models>,  /// The request count.
    #[serde(rename = "ml_request_count", default, skip_serializing_if = "Option::is_none")]
    pub ml_request_count: Option<u32>,  /// The circuit breaker trigger count.
    #[serde(rename = "ml_circuit_breaker_trigger_count", default, skip_serializing_if = "Option::is_none")]
    pub ml_circuit_breaker_trigger_count: Option<u32>,
}

impl NodeStatsDetails {
    
    pub fn new() -> NodeStatsDetails {
        NodeStatsDetails {
            algorithms: None,
            ml_jvm_heap_usage: None,
            ml_deployed_model_count: None,
            ml_executing_task_count: None,
            ml_failure_count: None,
            models: None,
            ml_request_count: None,
            ml_circuit_breaker_trigger_count: None,
        }
    }
}
