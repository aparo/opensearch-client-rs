/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResolveIndexDataStreamsItem {
    /// The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
    #[serde(rename = "timestamp_field")]
    pub timestamp_field: String,
    /// A comma-separated list of data streams, indexes, and aliases used to limit the request.
    /// Supports wildcards (`*`).
    /// To target all data streams and indexes, omit this parameter or use `*` or `_all`.
    #[serde(rename = "backing_indices")]
    pub backing_indices: common::Indices,
    #[serde(rename = "name")]
    pub name: String,
}

impl ResolveIndexDataStreamsItem {
    pub fn new(
        timestamp_field: String,
        backing_indices: common::Indices,
        name: String,
    ) -> ResolveIndexDataStreamsItem {
        ResolveIndexDataStreamsItem {
            timestamp_field,
            backing_indices,
            name,
        }
    }
}
