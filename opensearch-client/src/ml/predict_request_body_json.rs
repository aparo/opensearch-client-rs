/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ml;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PredictRequestBodyJson {  /// Whether to return bytes in model output.
    #[serde(rename = "return_number", default, skip_serializing_if = "Option::is_none")]
    pub return_number: Option<bool>,
    #[serde(rename = "input_query", default, skip_serializing_if = "Option::is_none")]
    pub input_query: Option<ml::InputQuery>,  /// The target response.
    #[serde(rename = "target_response", default, skip_serializing_if = "Option::is_none")]
    pub target_response: Option<Vec<String>>,  /// The text documents.
    #[serde(rename = "text_docs", default, skip_serializing_if = "Option::is_none")]
    pub text_docs: Option<Vec<String>>,  /// The input index.
    #[serde(rename = "input_index", default, skip_serializing_if = "Option::is_none")]
    pub input_index: Option<Vec<String>>,
}

impl PredictRequestBodyJson {
    
    pub fn new() -> PredictRequestBodyJson {
        PredictRequestBodyJson {
            return_number: None,
            input_query: None,
            target_response: None,
            text_docs: None,
            input_index: None,
        }
    }
}
