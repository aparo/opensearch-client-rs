/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IntervalsAnyOf {
    #[serde(rename = "filter", default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<common::query_dsl::IntervalsFilter>>,
    /// An array of rules to match.
    #[serde(rename = "intervals")]
    pub intervals: Vec<Box<common::query_dsl::IntervalsContainer>>,
}

impl IntervalsAnyOf {
    pub fn new(intervals: Vec<common::query_dsl::IntervalsContainer>) -> IntervalsAnyOf {
        IntervalsAnyOf {
            filter: None,
            intervals: intervals.into_iter().map(Box::new).collect(),
        }
    }
}
