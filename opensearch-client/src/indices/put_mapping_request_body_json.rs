/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

/// PutMappingRequestBodyJson
/// The mapping definition

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutMappingRequestBodyJson {
    #[serde(rename = "dynamic", default, skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<String>,
    /// Automatically map strings into numeric data types for all fields.
    #[serde(
        rename = "numeric_detection",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub numeric_detection: Option<bool>,
    #[serde(
        rename = "_field_names",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub field_names: Option<common::mapping::FieldNamesField>,
    /// Controls whether dynamic date detection is enabled.
    #[serde(
        rename = "date_detection",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub date_detection: Option<bool>,
    /// Mapping for a field. For new fields, this mapping can include:
    ///
    /// - Field name
    /// - Field data type
    /// - Mapping parameters
    #[serde(
        rename = "properties",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub properties: Option<serde_json::Value>,
    /// If date detection is enabled then new string fields are checked
    /// against `dynamic_date_formats` and if the value matches then
    /// a new date field is added instead of string.
    #[serde(
        rename = "dynamic_date_formats",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub dynamic_date_formats: Option<Vec<String>>,
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<common::mapping::SourceField>,
    #[serde(rename = "_routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<common::mapping::RoutingField>,
    #[serde(rename = "_meta", default, skip_serializing_if = "Option::is_none")]
    pub meta: Option<common::Metadata>,
}

impl PutMappingRequestBodyJson {
    /// The mapping definition
    pub fn new() -> PutMappingRequestBodyJson {
        PutMappingRequestBodyJson {
            dynamic: None,
            numeric_detection: None,
            field_names: None,
            date_detection: None,
            properties: None,
            dynamic_date_formats: None,
            source: None,
            routing: None,
            meta: None,
        }
    }
}
