/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Process {
    #[serde(rename = "mem", default, skip_serializing_if = "Option::is_none")]
    pub mem: Option<nodes::stats::ProcessMemoryStats>,  /// Number of opened file descriptors associated with the current or `-1` if not supported.
    #[serde(rename = "open_file_descriptors", default, skip_serializing_if = "Option::is_none")]
    pub open_file_descriptors: Option<u32>,
    #[serde(rename = "timestamp", default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
    #[serde(rename = "cpu", default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<nodes::stats::ProcessCpuStats>,  /// Maximum number of file descriptors allowed on the system, or `-1` if not supported.
    #[serde(rename = "max_file_descriptors", default, skip_serializing_if = "Option::is_none")]
    pub max_file_descriptors: Option<u32>,
}

impl Process {
    
    pub fn new() -> Process {
        Process {
            mem: None,
            open_file_descriptors: None,
            timestamp: None,
            cpu: None,
            max_file_descriptors: None,
        }
    }
}
