/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PostStats {
    #[serde(rename = "end_time", default, skip_serializing_if = "Option::is_none")]
    pub end_time: Option<serde_json::Value>,
    #[serde(rename = "index", default, skip_serializing_if = "Option::is_none")]
    pub index: Option<serde_json::Value>,
    #[serde(rename = "start_time", default, skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "user", default, skip_serializing_if = "Option::is_none")]
    pub user: Option<serde_json::Value>,
    #[serde(rename = "cluster_name", default, skip_serializing_if = "Option::is_none")]
    pub cluster_name: Option<serde_json::Value>,
    #[serde(rename = "execution_time", default, skip_serializing_if = "Option::is_none")]
    pub execution_time: Option<serde_json::Value>,
    #[serde(rename = "query", default, skip_serializing_if = "Option::is_none")]
    pub query: Option<serde_json::Value>,
}

impl PostStats {
    
    pub fn new() -> PostStats {
        PostStats {
            end_time: None,
            index: None,
            start_time: None,
            user: None,
            cluster_name: None,
            execution_time: None,
            query: None,
        }
    }
}
