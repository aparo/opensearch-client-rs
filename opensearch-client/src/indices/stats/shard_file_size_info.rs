/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardFileSizeInfo {
    #[serde(
        rename = "average_size_in_bytes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub average_size_in_bytes: Option<u32>,
    #[serde(
        rename = "min_size_in_bytes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub min_size_in_bytes: Option<u32>,
    #[serde(rename = "size_in_bytes")]
    pub size_in_bytes: u32,
    #[serde(rename = "size", default, skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "count", default, skip_serializing_if = "Option::is_none")]
    pub count: Option<u32>,
    #[serde(
        rename = "max_size_in_bytes",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub max_size_in_bytes: Option<u32>,
}

impl ShardFileSizeInfo {
    pub fn new(size_in_bytes: u32, description: String) -> ShardFileSizeInfo {
        ShardFileSizeInfo {
            average_size_in_bytes: None,
            min_size_in_bytes: None,
            size_in_bytes,
            size: None,
            description,
            count: None,
            max_size_in_bytes: None,
        }
    }
}
