/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReindexTask {
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "cancellable")]
    pub cancellable: bool,
    #[serde(rename = "headers")]
    pub headers: common::HttpHeaders,
    #[serde(rename = "resource_stats", default, skip_serializing_if = "Option::is_none")]
    pub resource_stats: Option<common::ResourceStats>,
    #[serde(rename = "running_time_in_nanos")]
    pub running_time_in_nanos: String,
    #[serde(rename = "start_time_in_millis")]
    pub start_time_in_millis: String,
    #[serde(rename = "node")]
    pub node: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "cancelled", default, skip_serializing_if = "Option::is_none")]
    pub cancelled: Option<bool>,
    #[serde(rename = "status")]
    pub status: core::reindex_rethrottle::ReindexStatus,
    #[serde(rename = "action")]
    pub action: String,
    #[serde(rename = "id")]
    pub id: u32,
}

impl ReindexTask {
    
    pub fn new(r#type: String, cancellable: bool, headers: common::HttpHeaders, running_time_in_nanos: String, start_time_in_millis: String, node: String, description: String, status: core::reindex_rethrottle::ReindexStatus, action: String, id: u32) -> ReindexTask {
        ReindexTask {
            r#type,
            cancellable,
            headers,
            resource_stats: None,
            running_time_in_nanos,
            start_time_in_millis,
            node,
            description,
            cancelled: None,
            status,
            action,
            id,
        }
    }
}
