/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct WriteResponseBase {
    #[serde(rename = "_index")]
    pub index: String,
    #[serde(rename = "result")]
    pub result: String,
    #[serde(rename = "forced_refresh", default, skip_serializing_if = "Option::is_none")]
    pub forced_refresh: Option<bool>,
    #[serde(rename = "_primary_term")]
    pub primary_term: u32,
    #[serde(rename = "_seq_no")]
    pub seq_no: u32,
    #[serde(rename = "_version")]
    pub version: u32,
    #[serde(rename = "_id")]
    pub id: String,
    #[serde(rename = "_shards")]
    pub shards: common::ShardStatistics,
}

impl WriteResponseBase {
    
    pub fn new(index: String, result: String, primary_term: u32, seq_no: u32, version: u32, id: String, shards: common::ShardStatistics) -> WriteResponseBase {
        WriteResponseBase {
            index,
            result,
            forced_refresh: None,
            primary_term,
            seq_no,
            version,
            id,
            shards,
        }
    }
}
