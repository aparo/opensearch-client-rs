/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::indices;
use crate::nodes;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeInfoSettingsCluster {
    #[serde(rename = "initial_cluster_manager_nodes", default, skip_serializing_if = "Option::is_none")]
    pub initial_cluster_manager_nodes: Option<common::StringOrStringArray>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "initial_master_nodes", default, skip_serializing_if = "Option::is_none")]
    pub initial_master_nodes: Option<common::StringOrStringArray>,
    #[serde(rename = "deprecation_indexing", default, skip_serializing_if = "Option::is_none")]
    pub deprecation_indexing: Option<nodes::info::NodeInfoSettingsDeprecationIndexing>,
    #[serde(rename = "routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<indices::IndexRouting>,
    #[serde(rename = "election", default, skip_serializing_if = "Option::is_none")]
    pub election: Option<nodes::info::NodeInfoSettingsClusterElection>,
}

impl NodeInfoSettingsCluster {
    
    pub fn new(name: String) -> NodeInfoSettingsCluster {
        NodeInfoSettingsCluster {
            initial_cluster_manager_nodes: None,
            name,
            initial_master_nodes: None,
            deprecation_indexing: None,
            routing: None,
            election: None,
        }
    }
}
