/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SslInfo {  /// A list of domain names from local certificates.
    #[serde(rename = "local_certificates_list", default, skip_serializing_if = "Option::is_none")]
    pub local_certificates_list: Option<Vec<String>>,  /// Whether the hostname validation is supported.
    #[serde(rename = "ssl_openssl_supports_hostname_validation")]
    pub ssl_openssl_supports_hostname_validation: bool,  /// Whether `KMF` is supported.
    #[serde(rename = "ssl_openssl_supports_key_manager_factory")]
    pub ssl_openssl_supports_key_manager_factory: bool,  /// Returns the transport server's name.
    #[serde(rename = "ssl_provider_transport_server")]
    pub ssl_provider_transport_server: String,  /// Whether OpenSSL is available.
    #[serde(rename = "ssl_openssl_available")]
    pub ssl_openssl_available: bool,  /// Returns the transport client's name.
    #[serde(rename = "ssl_provider_transport_client")]
    pub ssl_provider_transport_client: String,
}

impl SslInfo {
    
    pub fn new(ssl_openssl_supports_hostname_validation: bool, ssl_openssl_supports_key_manager_factory: bool, ssl_provider_transport_server: String, ssl_openssl_available: bool, ssl_provider_transport_client: String) -> SslInfo {
        SslInfo {
            local_certificates_list: None,
            ssl_openssl_supports_hostname_validation,
            ssl_openssl_supports_key_manager_factory,
            ssl_provider_transport_server,
            ssl_openssl_available,
            ssl_provider_transport_client,
        }
    }
}
