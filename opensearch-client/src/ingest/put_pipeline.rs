/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::ingest;
use serde::{Deserialize, Serialize};

/// PutPipeline
/// The ingest definition

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PutPipeline {
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<u32>,
    /// Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified.
    #[serde(
        rename = "processors",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub processors: Option<Vec<ingest::Processor>>,
    /// Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, OpenSearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. OpenSearch will not attempt to run the pipeline's remaining processors.
    #[serde(
        rename = "on_failure",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub on_failure: Option<Vec<ingest::Processor>>,
    /// Description of the ingest pipeline.
    #[serde(
        rename = "description",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub description: Option<String>,
    #[serde(rename = "_meta", default, skip_serializing_if = "Option::is_none")]
    pub meta: Option<common::Metadata>,
}

impl PutPipeline {
    /// The ingest definition
    pub fn new() -> PutPipeline {
        PutPipeline {
            version: None,
            processors: None,
            on_failure: None,
            description: None,
            meta: None,
        }
    }
}
