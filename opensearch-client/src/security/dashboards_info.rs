/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DashboardsInfo {  /// Indicates whether multi-tenancy is enabled.
    #[serde(rename = "opensearch_dashboards_mt_enabled", default, skip_serializing_if = "Option::is_none")]
    pub opensearch_dashboards_mt_enabled: Option<bool>,  /// A list of available sign-in options.
    #[serde(rename = "sign_in_options", default, skip_serializing_if = "Option::is_none")]
    pub sign_in_options: Option<Vec<String>>,  /// User's name
    #[serde(rename = "user_name", default, skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,  /// The error message when a password validation fails.
    #[serde(rename = "password_validation_error_message", default, skip_serializing_if = "Option::is_none")]
    pub password_validation_error_message: Option<String>,  /// Indicates whether `DNFOF` is enabled.
    #[serde(rename = "not_fail_on_forbidden_enabled", default, skip_serializing_if = "Option::is_none")]
    pub not_fail_on_forbidden_enabled: Option<bool>,  /// The name of the user used to connect dashboard's to the server.
    #[serde(rename = "opensearch_dashboards_server_user", default, skip_serializing_if = "Option::is_none")]
    pub opensearch_dashboards_server_user: Option<String>,  /// Indicates whether multi-tenancy is enabled.
    #[serde(rename = "multitenancy_enabled", default, skip_serializing_if = "Option::is_none")]
    pub multitenancy_enabled: Option<bool>,  /// The regular expression used perform password validation.
    #[serde(rename = "password_validation_regex", default, skip_serializing_if = "Option::is_none")]
    pub password_validation_regex: Option<String>,  /// The name of the dashboard's index.
    #[serde(rename = "opensearch_dashboards_index", default, skip_serializing_if = "Option::is_none")]
    pub opensearch_dashboards_index: Option<String>,  /// The default tenant setting for the dashboard.
    #[serde(rename = "default_tenant", default, skip_serializing_if = "Option::is_none")]
    pub default_tenant: Option<String>,  /// Indicates whether a private tenant is enabled for all users.
    #[serde(rename = "private_tenant_enabled", default, skip_serializing_if = "Option::is_none")]
    pub private_tenant_enabled: Option<bool>,
}

impl DashboardsInfo {
    
    pub fn new() -> DashboardsInfo {
        DashboardsInfo {
            opensearch_dashboards_mt_enabled: None,
            sign_in_options: None,
            user_name: None,
            password_validation_error_message: None,
            not_fail_on_forbidden_enabled: None,
            opensearch_dashboards_server_user: None,
            multitenancy_enabled: None,
            password_validation_regex: None,
            opensearch_dashboards_index: None,
            default_tenant: None,
            private_tenant_enabled: None,
        }
    }
}
