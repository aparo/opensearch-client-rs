/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::nodes;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShardSearchBackpressureTaskResourceTrackerStats {
    #[serde(rename = "heap_usage_tracker", default, skip_serializing_if = "Option::is_none")]
    pub heap_usage_tracker: Option<nodes::stats::ShardSearchBackpressureTaskResourceTrackerHeapUsageTrackerStats>,
    #[serde(rename = "cpu_usage_tracker", default, skip_serializing_if = "Option::is_none")]
    pub cpu_usage_tracker: Option<nodes::stats::ShardSearchBackpressureTaskResourceTrackerCpuUsageTrackerStats>,
    #[serde(rename = "elapsed_time_tracker", default, skip_serializing_if = "Option::is_none")]
    pub elapsed_time_tracker: Option<nodes::stats::ShardSearchBackpressureTaskResourceTrackerElapsedTimeTrackerStats>,
}

impl ShardSearchBackpressureTaskResourceTrackerStats {
    
    pub fn new() -> ShardSearchBackpressureTaskResourceTrackerStats {
        ShardSearchBackpressureTaskResourceTrackerStats {
            heap_usage_tracker: None,
            cpu_usage_tracker: None,
            elapsed_time_tracker: None,
        }
    }
}
