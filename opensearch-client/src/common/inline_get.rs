/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineGet {
    #[serde(rename = "found")]
    pub found: bool,
    #[serde(rename = "_seq_no", default, skip_serializing_if = "Option::is_none")]
    pub seq_no: Option<u32>,
    #[serde(rename = "_source", default, skip_serializing_if = "Option::is_none")]
    pub source: Option<serde_json::Value>,
    #[serde(rename = "_routing", default, skip_serializing_if = "Option::is_none")]
    pub routing: Option<String>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(rename = "_primary_term", default, skip_serializing_if = "Option::is_none")]
    pub primary_term: Option<f64>,
}

impl InlineGet {
    
    pub fn new(found: bool) -> InlineGet {
        InlineGet {
            found,
            seq_no: None,
            source: None,
            routing: None,
            fields: None,
            primary_term: None,
        }
    }
}
