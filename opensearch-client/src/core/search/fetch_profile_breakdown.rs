/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FetchProfileBreakdown {
    #[serde(rename = "next_reader", default, skip_serializing_if = "Option::is_none")]
    pub next_reader: Option<u32>,
    #[serde(rename = "process", default, skip_serializing_if = "Option::is_none")]
    pub process: Option<u32>,
    #[serde(rename = "load_stored_fields_count", default, skip_serializing_if = "Option::is_none")]
    pub load_stored_fields_count: Option<u32>,
    #[serde(rename = "load_stored_fields", default, skip_serializing_if = "Option::is_none")]
    pub load_stored_fields: Option<u32>,
    #[serde(rename = "next_reader_count", default, skip_serializing_if = "Option::is_none")]
    pub next_reader_count: Option<u32>,
    #[serde(rename = "load_source_count", default, skip_serializing_if = "Option::is_none")]
    pub load_source_count: Option<u32>,
    #[serde(rename = "load_source", default, skip_serializing_if = "Option::is_none")]
    pub load_source: Option<u32>,
    #[serde(rename = "process_count", default, skip_serializing_if = "Option::is_none")]
    pub process_count: Option<u32>,
}

impl FetchProfileBreakdown {
    
    pub fn new() -> FetchProfileBreakdown {
        FetchProfileBreakdown {
            next_reader: None,
            process: None,
            load_stored_fields_count: None,
            load_stored_fields: None,
            next_reader_count: None,
            load_source_count: None,
            load_source: None,
            process_count: None,
        }
    }
}
