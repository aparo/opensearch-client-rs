/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CgroupCpuStat {  /// The number of times all tasks in the same cgroup as the OpenSearch process have been throttled.
    #[serde(rename = "number_of_times_throttled", default, skip_serializing_if = "Option::is_none")]
    pub number_of_times_throttled: Option<u32>,  /// The number of reporting periods (as specified by `cfs_period_micros`) that have elapsed.
    #[serde(rename = "number_of_elapsed_periods", default, skip_serializing_if = "Option::is_none")]
    pub number_of_elapsed_periods: Option<u32>,
    #[serde(rename = "time_throttled_nanos", default, skip_serializing_if = "Option::is_none")]
    pub time_throttled_nanos: Option<String>,
}

impl CgroupCpuStat {
    
    pub fn new() -> CgroupCpuStat {
        CgroupCpuStat {
            number_of_times_throttled: None,
            number_of_elapsed_periods: None,
            time_throttled_nanos: None,
        }
    }
}
