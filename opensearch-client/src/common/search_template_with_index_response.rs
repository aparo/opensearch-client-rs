/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use crate::core;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchTemplateWithIndexResponse {
    #[serde(rename = "status", default, skip_serializing_if = "Option::is_none")]
    pub status: Option<f64>,
    #[serde(rename = "took")]
    pub took: u32,
    #[serde(rename = "suggest", default, skip_serializing_if = "Option::is_none")]
    pub suggest: Option<serde_json::Value>,
    #[serde(rename = "_scroll_id", default, skip_serializing_if = "Option::is_none")]
    pub scroll_id: Option<String>,
    #[serde(rename = "fields", default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<serde_json::Value>,
    #[serde(rename = "timed_out")]
    pub timed_out: bool,
    #[serde(rename = "aggregations", default, skip_serializing_if = "Option::is_none")]
    pub aggregations: Option<serde_json::Value>,
    #[serde(rename = "profile", default, skip_serializing_if = "Option::is_none")]
    pub profile: Option<core::search::Profile>,
    #[serde(rename = "max_score", default, skip_serializing_if = "Option::is_none")]
    pub max_score: Option<f64>,
    #[serde(rename = "_clusters", default, skip_serializing_if = "Option::is_none")]
    pub clusters: Option<common::ClusterStatistics>,
    #[serde(rename = "_shards")]
    pub shards: common::ShardStatistics,
    #[serde(rename = "num_reduce_phases", default, skip_serializing_if = "Option::is_none")]
    pub num_reduce_phases: Option<u32>,
    #[serde(rename = "hits")]
    pub hits: core::search::HitsMetadata,
    #[serde(rename = "terminated_early", default, skip_serializing_if = "Option::is_none")]
    pub terminated_early: Option<bool>,
    #[serde(rename = "pit_id", default, skip_serializing_if = "Option::is_none")]
    pub pit_id: Option<String>,
}

impl SearchTemplateWithIndexResponse {
    
    pub fn new(took: u32, timed_out: bool, shards: common::ShardStatistics, hits: core::search::HitsMetadata) -> SearchTemplateWithIndexResponse {
        SearchTemplateWithIndexResponse {
            status: None,
            took,
            suggest: None,
            scroll_id: None,
            fields: None,
            timed_out,
            aggregations: None,
            profile: None,
            max_score: None,
            clusters: None,
            shards,
            num_reduce_phases: None,
            hits,
            terminated_early: None,
            pit_id: None,
        }
    }
}
