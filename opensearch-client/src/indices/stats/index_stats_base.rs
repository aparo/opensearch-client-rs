/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IndexStatsBase {
    #[serde(
        rename = "completion",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub completion: Option<common::CompletionStats>,
    #[serde(rename = "merges", default, skip_serializing_if = "Option::is_none")]
    pub merges: Option<common::MergesStats>,
    #[serde(rename = "indexing", default, skip_serializing_if = "Option::is_none")]
    pub indexing: Option<common::IndexingStats>,
    #[serde(rename = "refresh", default, skip_serializing_if = "Option::is_none")]
    pub refresh: Option<common::RefreshStats>,
    #[serde(rename = "warmer", default, skip_serializing_if = "Option::is_none")]
    pub warmer: Option<common::WarmerStats>,
    #[serde(
        rename = "request_cache",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub request_cache: Option<common::RequestCacheStats>,
    #[serde(rename = "store", default, skip_serializing_if = "Option::is_none")]
    pub store: Option<common::StoreStats>,
    #[serde(rename = "fielddata", default, skip_serializing_if = "Option::is_none")]
    pub fielddata: Option<common::FielddataStats>,
    #[serde(rename = "flush", default, skip_serializing_if = "Option::is_none")]
    pub flush: Option<common::FlushStats>,
    #[serde(rename = "segments", default, skip_serializing_if = "Option::is_none")]
    pub segments: Option<common::SegmentsStats>,
    #[serde(rename = "translog", default, skip_serializing_if = "Option::is_none")]
    pub translog: Option<common::TranslogStats>,
    #[serde(
        rename = "query_cache",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub query_cache: Option<common::QueryCacheStats>,
    #[serde(rename = "recovery", default, skip_serializing_if = "Option::is_none")]
    pub recovery: Option<common::RecoveryStats>,
    #[serde(rename = "search", default, skip_serializing_if = "Option::is_none")]
    pub search: Option<common::SearchStats>,
    #[serde(rename = "docs", default, skip_serializing_if = "Option::is_none")]
    pub docs: Option<common::DocStats>,
    #[serde(rename = "get", default, skip_serializing_if = "Option::is_none")]
    pub get: Option<common::GetStats>,
}

impl IndexStatsBase {
    pub fn new() -> IndexStatsBase {
        IndexStatsBase {
            completion: None,
            merges: None,
            indexing: None,
            refresh: None,
            warmer: None,
            request_cache: None,
            store: None,
            fielddata: None,
            flush: None,
            segments: None,
            translog: None,
            query_cache: None,
            recovery: None,
            search: None,
            docs: None,
            get: None,
        }
    }
}
