/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;
use opensearch_dsl::ShardStatistics;

use crate::client::ContentType;
use crate::client::ResponseContent;
use crate::common;
use crate::Error;
use reqwest;
use serde::{de::Error as OtherError, Deserialize, Serialize};
use std::sync::Arc;
pub type ExistsSourceSuccess = serde_json::Value;
pub type ExistsSuccess = serde_json::Value;
pub type SearchWithIndexSuccess = serde_json::Value;
pub type GetSourceSuccess = serde_json::Value;
pub type ClearScrollSuccess = serde_json::Value;

pub type SearchSuccess = opensearch_dsl::SearchResponse;

pub struct CommonApi {
    configuration: Arc<crate::Configuration>,
}

#[derive(Serialize, Deserialize, Debug)]
pub struct DocumentDeleteResponse {
    #[serde(rename = "_index")]
    pub index: String,
    #[serde(rename = "_id")]
    pub id: String,
    #[serde(rename = "_version")]
    pub version: u32,
    pub result: String,
    #[serde(rename = "_shards")]
    pub shards: ShardStatistics,
    #[serde(rename = "_seq_no")]
    pub seq_no: u32,
    #[serde(rename = "_primary_term")]
    pub primary_term: u32,
}

/// Struct for typed errors of method [`exists_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExistsSourceError {
    DefaultResponse(serde_json::Value),
    Status404(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`exists`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExistsError {
    Status404(serde_json::Value),
    DefaultResponse(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetError {
    DefaultResponse(crate::core::get::GetResult),
    Status404(crate::core::get::GetResult),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteError {
    Status404(crate::common::WriteResponseBase),
    DefaultResponse(crate::common::WriteResponseBase),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`search_with_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchWithIndexError {
    Status404(crate::query::ErrorResponse),
    Status400(crate::query::ErrorResponse),
    DefaultResponse(crate::core::search::ResponseBody),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`clear_scroll`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClearScrollError {
    DefaultResponse(crate::common::ClearScrollResponse),
    Status404(crate::common::ClearScrollNotFoundJson),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchError {
    DefaultResponse(crate::core::search::ResponseBody),
    Status400(crate::query::ErrorResponse),
    Status404(crate::query::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// Struct for typed errors of method [`get_source`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSourceError {
    Status404(crate::query::ErrorResponse),
    DefaultResponse(crate::common::GetSourceResponse),
    UnknownValue(serde_json::Value),
}
