/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeShard {
    #[serde(
        rename = "unassigned_info",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub unassigned_info: Option<common::cluster::UnassignedInformation>,
    #[serde(rename = "shard")]
    pub shard: u32,
    #[serde(rename = "state")]
    pub state: String,
    #[serde(rename = "index")]
    pub index: String,
    #[serde(
        rename = "recovery_source",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub recovery_source: Option<serde_json::Value>,
    #[serde(
        rename = "allocation_id",
        default,
        skip_serializing_if = "Option::is_none"
    )]
    pub allocation_id: Option<serde_json::Value>,
    #[serde(rename = "node", default, skip_serializing_if = "Option::is_none")]
    pub node: Option<String>,
    #[serde(rename = "primary")]
    pub primary: bool,
}

impl NodeShard {
    pub fn new(shard: u32, state: String, index: String, primary: bool) -> NodeShard {
        NodeShard {
            unassigned_info: None,
            shard,
            state,
            index,
            recovery_source: None,
            allocation_id: None,
            node: None,
            primary,
        }
    }
}
