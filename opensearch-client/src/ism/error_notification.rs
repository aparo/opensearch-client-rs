/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::ism;
use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ErrorNotification {
    #[serde(rename = "channel", default, skip_serializing_if = "Option::is_none")]
    pub channel: Option<ism::Channel>,
    #[serde(rename = "message_template", default, skip_serializing_if = "Option::is_none")]
    pub message_template: Option<serde_json::Value>,
    #[serde(rename = "destination", default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<ism::ErrorNotificationDestination>,
}

impl ErrorNotification {
    
    pub fn new() -> ErrorNotification {
        ErrorNotification {
            channel: None,
            message_template: None,
            destination: None,
        }
    }
}
