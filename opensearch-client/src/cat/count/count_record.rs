/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CountRecord {  /// the document count
    #[serde(rename = "count", default, skip_serializing_if = "Option::is_none")]
    pub count: Option<String>,  /// Certain APIs may return values, including numbers such as epoch timestamps, as strings. This setting captures
  /// this behavior while keeping the semantics of the field type.
  /// 
  /// Depending on the target language, code generators can keep the union or remove it and leniently parse
  /// strings to the target type.
    #[serde(rename = "epoch", default, skip_serializing_if = "Option::is_none")]
    pub epoch: Option<common::StringifiedEpochTimeUnitSeconds>,  /// Time of day, expressed as HH:MM:SS.
    #[serde(rename = "timestamp", default, skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<String>,
}

impl CountRecord {
    
    pub fn new() -> CountRecord {
        CountRecord {
            count: None,
            epoch: None,
            timestamp: None,
        }
    }
}
