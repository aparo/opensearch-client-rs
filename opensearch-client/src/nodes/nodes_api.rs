/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */
use bon::bon;

use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize, de::Error as OtherError};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};
use crate::apis::ContentType;
use crate::*;


#[async_trait]
pub trait NodesApi: Send + Sync {


    /// GET /_nodes/{node_id}/{metric}///
    /// Returns information about nodes in the cluster.
    async fn info(&self, params: InfoParams) -> Result<String, Error>;

    /// GET /_nodes/{node_id}/hot_threads///
    /// Returns information about hot threads on each node in the cluster.
    async fn hot_threads(&self, params: HotThreadsParams) -> Result<String, Error>;

    /// GET /_nodes/{node_id}/stats/{metric}/{index_metric}///
    /// Returns statistical information about nodes in the cluster.
    async fn stats(&self, params: StatsParams) -> Result<String, Error>;

    /// GET /_nodes/{node_id}/usage/{metric}///
    /// Returns low-level information about REST actions usage on nodes.
    async fn usage(&self, params: UsageParams) -> Result<String, Error>;

    /// POST /_nodes/{node_id}/reload_secure_settings///
    /// Reloads secure settings.
    async fn reload_secure_settings(&self, params: ReloadSecureSettingsParams) -> Result<String, Error>;
}

pub struct NodesApiClient {
    configuration: Arc<crate::Configuration>
}

impl NodesApiClient {
    pub fn new(configuration: Arc<crate::Configuration>) -> Self {
        Self { configuration }
    }
}


/// Struct for passing parameters to the method [`info`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InfoParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub timeout: Option<String>,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub flat_settings: Option<bool>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub metric: String,
      /// No description available
    pub node_id: String,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
}
/// Struct for passing parameters to the method [`hot_threads`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct HotThreadsParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub interval: Option<String>,
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub timeout: Option<String>,
      /// Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue.
    pub ignore_idle_threads: Option<bool>,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub node_id: String,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
      /// Number of samples of thread stack trace.
    pub snapshots: Option<i32>,
      /// Specify the number of threads to provide information for.
    pub threads: Option<i32>,
      /// The type to sample.
    pub r#type: Option<String>,
}
/// Struct for passing parameters to the method [`stats`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct StatsParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub timeout: Option<String>,
      /// No description available
    pub completion_fields: Option<common::CompletionFields>,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub fielddata_fields: Option<common::FielddataFields>,
      /// No description available
    pub fields: Option<common::Fields>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub groups: Option<Vec<String>>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub include_segment_file_sizes: Option<bool>,
      /// No description available
    pub index_metric: String,
      /// No description available
    pub metric: String,
      /// No description available
    pub node_id: String,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
      /// No description available
    pub types: Option<Vec<String>>,
      /// Specifies the level of detail of the returned information.
    pub level: Option<String>,
}
/// Struct for passing parameters to the method [`usage`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UsageParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub timeout: Option<String>,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub metric: String,
      /// No description available
    pub node_id: String,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
}
/// Struct for passing parameters to the method [`reload_secure_settings`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ReloadSecureSettingsParams {
      /// A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and
  /// `d` (days). Also accepts "0" without a unit and "-1" to indicate an unspecified value.
    pub timeout: Option<String>,
      /// An object containing the password for the OpenSearch keystore.
    pub reload_secure_settings: nodes::ReloadSecureSettings,
      /// No description available
    pub error_trace: Option<bool>,
      /// No description available
    pub filter_path: Option<common::FilterPath>,
      /// No description available
    pub human: Option<bool>,
      /// No description available
    pub node_id: String,
      /// No description available
    pub pretty: Option<bool>,
      /// No description available
    pub source: Option<String>,
}

#[async_trait]
impl NodesApi for NodesApiClient {
///
      /// Returns information about nodes in the cluster.
    async fn info(&self, params: InfoParams) -> Result<String, Error> {
        let InfoParams {
            timeout,
            error_trace,
            filter_path,
            flat_settings,
            human,
            metric,
            node_id,
            pretty,
            source,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_nodes/{node_id}/{metric}", local_var_configuration.base_path, node_id=node_id, metric=metric);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = flat_settings {
        local_var_req_builder = local_var_req_builder.query(&[("flat_settings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timeout {
        local_var_req_builder = local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }







        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }///
      /// Returns information about hot threads on each node in the cluster.
    async fn hot_threads(&self, params: HotThreadsParams) -> Result<String, Error> {
        let HotThreadsParams {
            interval,
            timeout,
            ignore_idle_threads,
            error_trace,
            filter_path,
            human,
            node_id,
            pretty,
            source,
            snapshots,
            threads,
            r#type,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_nodes/{node_id}/hot_threads", local_var_configuration.base_path, node_id=node_id);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = ignore_idle_threads {
        local_var_req_builder = local_var_req_builder.query(&[("ignore_idle_threads", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = snapshots {
        local_var_req_builder = local_var_req_builder.query(&[("snapshots", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timeout {
        local_var_req_builder = local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval {
        local_var_req_builder = local_var_req_builder.query(&[("interval", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = threads {
        local_var_req_builder = local_var_req_builder.query(&[("threads", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }







        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }///
      /// Returns statistical information about nodes in the cluster.
    async fn stats(&self, params: StatsParams) -> Result<String, Error> {
        let StatsParams {
            timeout,
            completion_fields,
            error_trace,
            fielddata_fields,
            fields,
            filter_path,
            groups,
            human,
            include_segment_file_sizes,
            index_metric,
            metric,
            node_id,
            pretty,
            source,
            types,
            level,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_nodes/{node_id}/stats/{metric}/{index_metric}", local_var_configuration.base_path, index_metric=index_metric, node_id=node_id, metric=metric);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = groups {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("groups".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("groups", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }
    if let Some(ref local_var_str) = timeout {
        local_var_req_builder = local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = completion_fields {
        local_var_req_builder = local_var_req_builder.query(&[("completion_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_segment_file_sizes {
        local_var_req_builder = local_var_req_builder.query(&[("include_segment_file_sizes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fielddata_fields {
        local_var_req_builder = local_var_req_builder.query(&[("fielddata_fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = types {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(&local_var_str.into_iter().map(|p| ("types".to_owned(), p.to_string())).collect::<Vec<(std::string::String, std::string::String)>>()),
            _ => local_var_req_builder.query(&[("types", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
        };
    }







        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }///
      /// Returns low-level information about REST actions usage on nodes.
    async fn usage(&self, params: UsageParams) -> Result<String, Error> {
        let UsageParams {
            timeout,
            error_trace,
            filter_path,
            human,
            metric,
            node_id,
            pretty,
            source,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_nodes/{node_id}/usage/{metric}", local_var_configuration.base_path, metric=metric, node_id=node_id);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timeout {
        local_var_req_builder = local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }







        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }///
      /// Reloads secure settings.
    async fn reload_secure_settings(&self, params: ReloadSecureSettingsParams) -> Result<String, Error> {
        let ReloadSecureSettingsParams {
            timeout,
            reload_secure_settings,
            error_trace,
            filter_path,
            human,
            node_id,
            pretty,
            source,
        } = params;
    
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}_nodes/{node_id}/reload_secure_settings", local_var_configuration.base_path, node_id=node_id);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());


    if let Some(ref local_var_str) = source {
        local_var_req_builder = local_var_req_builder.query(&[("source", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_path {
        local_var_req_builder = local_var_req_builder.query(&[("filter_path", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pretty {
        local_var_req_builder = local_var_req_builder.query(&[("pretty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = human {
        local_var_req_builder = local_var_req_builder.query(&[("human", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = timeout {
        local_var_req_builder = local_var_req_builder.query(&[("timeout", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = error_trace {
        local_var_req_builder = local_var_req_builder.query(&[("error_trace", &local_var_str.to_string())]);
    }






    local_var_req_builder = local_var_req_builder.json(&reload_secure_settings);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            
            serde_json::from_str(&local_var_content).map_err(Error::from)
            
            
        } else {
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
            };
            Err(Error::ApiError(local_var_error))
        }
    }
}














