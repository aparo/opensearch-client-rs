/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::common;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FingerprintAnalyzer {
    #[serde(rename = "separator")]
    pub separator: String,
    #[serde(rename = "max_output_size")]
    pub max_output_size: u32,
    #[serde(rename = "stopwords_path", default, skip_serializing_if = "Option::is_none")]
    pub stopwords_path: Option<String>,
    #[serde(rename = "preserve_original")]
    pub preserve_original: bool,
    #[serde(rename = "stopwords", default, skip_serializing_if = "Option::is_none")]
    pub stopwords: Option<common::analysis::StopWords>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "version", default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl FingerprintAnalyzer {
    
    pub fn new(separator: String, max_output_size: u32, preserve_original: bool, r#type: String) -> FingerprintAnalyzer {
        FingerprintAnalyzer {
            separator,
            max_output_size,
            stopwords_path: None,
            preserve_original,
            stopwords: None,
            r#type,
            version: None,
        }
    }
}
