/*
 * opensearch-client
 *
 * Rust Client for OpenSearch
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: alberto.paro@gmail.com
 * Generated by Paro OpenAPI Generator
 */

use crate::core;
use serde::{Deserialize, Serialize};




#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResponseBody {
    #[serde(rename = "took", default, skip_serializing_if = "Option::is_none")]
    pub took: Option<f64>,
    #[serde(rename = "expiration_time_in_millis", default, skip_serializing_if = "Option::is_none")]
    pub expiration_time_in_millis: Option<f64>,
    #[serde(rename = "response", default, skip_serializing_if = "Option::is_none")]
    pub response: Option<core::search::ResponseBody>,
    #[serde(rename = "id", default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "state", default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "start_time_in_millis", default, skip_serializing_if = "Option::is_none")]
    pub start_time_in_millis: Option<f64>,
}

impl ResponseBody {
    
    pub fn new() -> ResponseBody {
        ResponseBody {
            took: None,
            expiration_time_in_millis: None,
            response: None,
            id: None,
            state: None,
            start_time_in_millis: None,
        }
    }
}
